{
  "version": 3,
  "sources": ["node_modules/marked/src/defaults.ts", "node_modules/marked/src/helpers.ts", "node_modules/marked/src/Tokenizer.ts", "node_modules/marked/src/rules.ts", "node_modules/marked/src/Lexer.ts", "node_modules/marked/src/Renderer.ts", "node_modules/marked/src/TextRenderer.ts", "node_modules/marked/src/Parser.ts", "node_modules/marked/src/Hooks.ts", "node_modules/marked/src/Instance.ts", "node_modules/marked/src/marked.ts", "ts/xmlNamespaces.ts", "ts/eventFilters.ts", "ts/foreignObjectScaling.ts", "ts/keyboard.ts", "ts/stopwatch.ts", "ts/buildSteps.ts", "ts/urlHashes.ts", "ts/presenterView.ts", "ts/resizeOnBorderDrag.ts", "ts/setClassWhileMouseIdle.ts", "ts/slideChangeEvents.ts", "ts/slideLookups.ts", "ts/speakerNotes.ts", "ts/stepper.ts", "ts/thumbnails.ts", "ts/video.ts", "ts/workarounds.ts", "ts/app.ts", "ts/index.ts"],
  "sourcesContent": ["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n", "/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n", "import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n", "import { edit, noopTest } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n", "import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n", "import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n", "/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n", "import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport { unescape } from './helpers.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n", "import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n", "import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n", "import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n", "export type NamespaceName =\n  | \"svg\"\n  | \"xhtml\"\n  | \"xlink\"\n  | \"inkscape\"\n  | \"sodipodi\"\n  | \"slidie\";\n\n/**\n * XML namespace resolver for namespaces used by Slidie SVGs (and this\n * viewer).\n */\nexport default function ns(name: NamespaceName): string {\n  return {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: \"http://www.w3.org/1999/xhtml\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    inkscape: \"http://www.inkscape.org/namespaces/inkscape\",\n    sodipodi: \"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\",\n    slidie: \"http://xmlns.jhnet.co.uk/slidie/1.0\",\n  }[name];\n}\n", "import ns from \"./xmlNamespaces.ts\";\n\n/**\n * Given an Event, test whether that event involves any kind of hyperlink or\n * button not (specifically an XHTML or SVG <a> or <button> or <input> tag). If\n * it does, returns true.  Otherwise returns false.\n */\nexport function eventInvolvesHyperlink(evt: Event): boolean {\n  for (const elem of evt.composedPath() as HTMLElement[]) {\n    if (\n      ((elem.namespaceURI == ns(\"xhtml\") || elem.namespaceURI == ns(\"svg\")) &&\n        elem.localName == \"a\") ||\n      (elem.namespaceURI == ns(\"xhtml\") &&\n        (elem.localName == \"button\" || elem.localName == \"input\"))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Given a keydown event, test whether handling this event may interfere with\n * keyboard operation of a <button> or hyperlink.\n */\nexport function keyboardEventInterferesWithHyperlink(\n  evt: KeyboardEvent,\n): boolean {\n  switch (evt.key) {\n    case \"Enter\":\n    case \"Space\":\n      return eventInvolvesHyperlink(evt);\n\n    default:\n      return false;\n  }\n}\n", "/**\n * This module implements scaling of <foreignObject> elements such that thier\n * contents are shown a native size (or some multiple thereof).\n */\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Return the DOMMatrix which represents the Current Transform Matrix (from the\n * object's coordinate system to the top level user units (i.e. within the\n * viewBox, not on the screen)).\n *\n * By contrast with the built-in getCTM() method, this function uses only the\n * transforms statically declared in the SVG meaning it can be used on\n * non-displayed SVGs.  This does mean that the matrix returned does not\n * account for other (e.g. CSS-applied) transforms.\n */\nexport function getSvgStaticCTM(elem: SVGGraphicsElement) {\n  // Get the parents in root-to-leaf order\n  const parents = [elem];\n  while (parents[0].parentElement) {\n    // XXX: Typescript type for SVGGraphicsElement.parentElement is incorrect\n    // here\n    parents.splice(\n      0,\n      0,\n      parents[0].parentElement as Element as SVGGraphicsElement,\n    );\n  }\n  // Drop the top level 'svg' element since its transform matrix applies to\n  // the final SVG canvas, not to elements within it.\n  parents.splice(0, 1);\n\n  // Assemble a DOMMatrix from all of the transforms\n  const ctm = new DOMMatrix();\n  for (const elem of parents) {\n    for (const transform of elem.transform.baseVal) {\n      ctm.multiplySelf(transform.matrix);\n    }\n  }\n  return ctm;\n}\n\n/**\n * Return the size of user units in an SVG in pixels in the X and Y axes\n * (respectively) in a 2-element array.\n */\nexport function getSvgUserUnitSize(svg: SVGSVGElement): [number, number] {\n  if (svg.viewBox.baseVal === null) {\n    // Special case: viewBox not defined, the SVG is rendered with one user\n    // unit per pixel\n    return [1, 1];\n  }\n\n  const svgWidth = svg.width.baseVal.value;\n  const svgHeight = svg.height.baseVal.value;\n\n  const svgVBWidth = svg.viewBox.baseVal.width;\n  const svgVBHeight = svg.viewBox.baseVal.height;\n\n  const hScale = svgWidth / svgVBWidth;\n  const vScale = svgHeight / svgVBHeight;\n\n  const par = svg.preserveAspectRatio.baseVal;\n  if (par.align === SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE) {\n    // Case: Uniform scaling not used so whatever distorted aspect ratio we\n    // happen to have is what we'll get\n    return [hScale, vScale];\n  } else {\n    // Case: Uniform scaling used.\n    const viewBoxWiderThanSVG = svgVBWidth / svgVBHeight > svgWidth / svgHeight;\n    const meet =\n      par.meetOrSlice === SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET;\n    if (meet == viewBoxWiderThanSVG) {\n      return [hScale, hScale];\n    } else {\n      return [vScale, vScale];\n    }\n  }\n}\n\n/**\n * Return the width and height, in SVG pixels, of the provided element after\n * all relevant transform matrices have been applied.\n */\nexport function getForeignObjectSizePx(\n  elem: SVGForeignObjectElement,\n): [number, number] {\n  const ctm = getSvgStaticCTM(elem);\n\n  const [sx, sy] = getSvgUserUnitSize(elem.ownerSVGElement!);\n  ctm.scaleSelf(sx, sy);\n\n  const topLeft = ctm.transformPoint(\n    new DOMPoint(elem.x.baseVal.value, elem.y.baseVal.value),\n  );\n  const topRight = ctm.transformPoint(\n    new DOMPoint(\n      elem.x.baseVal.value + elem.width.baseVal.value,\n      elem.y.baseVal.value,\n    ),\n  );\n  const bottomLeft = ctm.transformPoint(\n    new DOMPoint(\n      elem.x.baseVal.value,\n      elem.y.baseVal.value + elem.height.baseVal.value,\n    ),\n  );\n\n  const dxW = topRight.x - topLeft.x;\n  const dyW = topRight.y - topLeft.y;\n  const width = Math.sqrt(dxW * dxW + dyW * dyW);\n\n  const dxH = bottomLeft.x - topLeft.x;\n  const dyH = bottomLeft.y - topLeft.y;\n  const height = Math.sqrt(dxH * dxH + dyH * dyH);\n\n  return [width, height];\n}\n\n/**\n * Scale a <foreignObject> element's contents according to the \"native\" size\n * of the SVG. That is, if the SVG is viewed at native size, the\n * <foreignObject> contents will be shown at native size too (regardless of any\n * scaling applied to the <foreignObject> element within the SVG).\n *\n * The scaling factor can be adjusted with the 'scale' argument. For example,\n * setting this to 2 will cause the contents of the <foreignObject> to be shown\n * at double native size (when the SVG is viewed at native size).\n */\nexport function scaleForeignObjectContents(\n  foreignObject: SVGForeignObjectElement,\n  scale: number = 1.0,\n) {\n  // The size of pixels within a <foreignObject> is determined by its width and\n  // height attributes. This means that if we have an <iframe> in a\n  // <foreignObject> with a width of 300 and height of 200, the iframe will\n  // be rendered as if on a 300x200 pixel display.\n  //\n  // Unfortunately, the width/height of a <foreignObject> is ordinarily given\n  // with reference to the local coordinate system potentially under the\n  // effect of some artbirary transformation matrix. This usually results in\n  // entirely unpredictable rendering sizes.\n  //\n  // To work around this we can set the width/height attributes to the\n  // desired size in pixels and then add a scale transform to resize the\n  // elemnt back to its original size.\n\n  // First we'll grab the actual size in pixels of the element after all\n  // transforms are applied.\n  const [widthPx, heightPx] = getForeignObjectSizePx(foreignObject);\n\n  // Next we'll adjust this to achieve the desired scaling factor\n  const width = widthPx / scale;\n  const height = heightPx / scale;\n\n  // Next we'll set the size attributes of the <foreignObject> to its size in\n  // pixels so that its contents are rendered at \"native\" size\n  const widthOrig = parseFloat(foreignObject.getAttribute(\"width\")!);\n  const heightOrig = parseFloat(foreignObject.getAttribute(\"height\")!);\n  foreignObject.setAttribute(\"width\", width.toString());\n  foreignObject.setAttribute(\"height\", height.toString());\n\n  // Compute the corrective scale factor to restore the intended size of the\n  // <foreignObject>\n  const sx = widthOrig / width;\n  const sy = heightOrig / height;\n\n  // We'll also need to move any x and y attributes into a translate\n  // transform which happens prior to scaling to avoid needing to scale these\n  // too.\n  const x = parseFloat(foreignObject.getAttribute(\"x\") || \"0\");\n  const y = parseFloat(foreignObject.getAttribute(\"y\") || \"0\");\n  foreignObject.removeAttribute(\"x\");\n  foreignObject.removeAttribute(\"y\");\n\n  // Finally apply the corrective transform\n  const existingTransform = foreignObject.getAttribute(\"transform\") || \"\";\n  foreignObject.setAttribute(\n    \"transform\",\n    `${existingTransform} translate(${x}, ${y}) scale(${sx}, ${sy})`,\n  );\n}\n\n/**\n * Scale the contents of all <foreignObject> elements with a slidie:scale\n * attribute such that their contents are displayed at the indicated proportion\n * of native size when the slide is viewed at native size.\n */\nexport function setupForeignObjectScaling(svg: SVGSVGElement) {\n  // XXX: Typescript incorrectly types getElementsByTagNameNS on an SVG as\n  // returning a HTMLCollectionOf which can only hold HTMLElements (of which\n  // SVGForeignObjectElement is not a decendent)\n  for (const foreignObject of svg.getElementsByTagNameNS(\n    ns(\"svg\"),\n    \"foreignObject\",\n  ) as unknown as HTMLCollectionOf<SVGForeignObjectElement>) {\n    if (foreignObject.hasAttributeNS(ns(\"slidie\"), \"scale\")) {\n      const scale = parseFloat(\n        foreignObject.getAttributeNS(ns(\"slidie\"), \"scale\")!,\n      );\n      scaleForeignObjectContents(foreignObject, scale);\n    }\n  }\n}\n", "/**\n * A tiny stub of a framework for processing key presses.\n */\n\nexport interface KeyboardShortcut {\n  // A list of key names for keys to match (e.g.['PageDown', 'J'] will match\n  // PageDown or the J key.). The case of letter names is ignored (e.g. 'T' and\n  // 't' both currently match a press of the 'T' key regardless of whether\n  // shift or capslock are pressed.)\n  //\n  // Modifiers are not currently supported: if a modifier key is pressed, the\n  // shortcut will never match.\n  keys: string[];\n}\n\n/**\n * Given a KeyboardEvent, match it against one of the provided shortcut\n * definitions.\n */\nexport function matchKeypress<T extends KeyboardShortcut>(\n  evt: KeyboardEvent,\n  shortcuts: T[],\n): T | null {\n  // For now we don't support matching on modifiers so just check none are\n  // pressed. (NB: We ignore shift/capslock as a special case.)\n  if (evt.altKey || evt.ctrlKey || evt.metaKey) {\n    return null;\n  }\n\n  for (const entry of shortcuts) {\n    for (const key of entry.keys) {\n      if (key.match(/^[a-zA-Z]$/) !== null) {\n        // Special case: Case-insensitive comparison of single letter keys\n        if (key.toLowerCase() == evt.key.toLowerCase()) {\n          return entry;\n        }\n      } else if (key == evt.key) {\n        return entry;\n      }\n    }\n  }\n\n  // No match\n  return null;\n}\n", "/**\n * State machine implementing a simple stopwatch-style timer.\n */\n\n/**\n * Given a duration in milliseconds, format this in human-readable terms of\n * hours, minutes and seconds.\n */\nexport function formatDuration(milliseconds: number): string {\n  let seconds = Math.floor(milliseconds / 1000);\n\n  const hours = Math.floor(seconds / (60 * 60));\n  seconds -= hours * 60 * 60;\n\n  const minutes = Math.floor(seconds / 60);\n  seconds -= minutes * 60;\n\n  const hh = hours.toString();\n  const mm = minutes.toString().padStart(2, \"0\");\n  const ss = seconds.toString().padStart(2, \"0\");\n\n  if (hours > 0) {\n    return `${hh}:${mm}:${ss}`;\n  } else {\n    return `${minutes}:${ss}`;\n  }\n}\n\n/**\n * Simple state machine for a stopwatch-style timer intended for the presenter\n * view.\n */\nexport class Stopwatch {\n  protected timerRunning: boolean;\n  protected timerStart: number;\n  protected timerEnd: number;\n\n  constructor(timerRunning: boolean = false) {\n    this.timerStart = Date.now();\n    this.timerEnd = this.timerStart;\n    this.timerRunning = timerRunning;\n  }\n\n  get running(): boolean {\n    return this.timerRunning;\n  }\n\n  /** Pause the timer. */\n  pause() {\n    if (this.timerRunning) {\n      this.timerEnd = Date.now();\n      this.timerRunning = false;\n    }\n  }\n\n  /** Resume the timer. */\n  resume() {\n    if (!this.timerRunning) {\n      const now = Date.now();\n      this.timerStart += now - this.timerEnd;\n      this.timerEnd = now;\n      this.timerRunning = true;\n    }\n  }\n\n  /** Toggle the pause state. Returns 'true' iff now running. */\n  togglePause() {\n    if (this.timerRunning) {\n      this.pause();\n    } else {\n      this.resume();\n    }\n\n    return this.timerRunning;\n  }\n\n  /** Reset the timer */\n  reset() {\n    this.timerStart = Date.now();\n    this.timerEnd = this.timerStart;\n  }\n\n  /** Return the number of milliseconds on the timer. */\n  read(): number {\n    if (this.timerRunning) {\n      this.timerEnd = Date.now();\n    }\n    return this.timerEnd - this.timerStart;\n  }\n}\n", "/**\n * The following functions are used for extracting information slidie specific\n * information from SVGs (e.g. build steps, thumbnails etc.).\n */\nimport ns from \"./xmlNamespaces.ts\";\n\nexport interface BuildStepVisibility {\n  // The SVG element whose visibility is controlled by the build step\n  elem: SVGElement;\n\n  // The step numbers (not necessarily zero-indexed) at which this build step\n  // is visible.\n  stepNumbers: number[];\n\n  // The step indices (zero-indexed) at which the build step is visible.\n  steps: number[];\n\n  // The build step tags assigned to this element (if any)\n  tags: string[];\n}\n\n/**\n * Given an SVG root node, find all SVG elements containing a slidie\n * 'steps' attribute.\n */\nexport function findBuildSteps(svgRoot: SVGSVGElement): BuildStepVisibility[] {\n  // Find all steps\n  const out: BuildStepVisibility[] = [];\n  for (const elem of svgRoot.querySelectorAll(\"*\")) {\n    if (\n      elem.namespaceURI == ns(\"svg\") &&\n      elem.hasAttributeNS(ns(\"slidie\"), \"steps\")\n    ) {\n      const stepNumbers = JSON.parse(\n        elem.getAttributeNS(ns(\"slidie\"), \"steps\")!,\n      ) as number[];\n      const tags = JSON.parse(\n        elem.getAttributeNS(ns(\"slidie\"), \"tags\") || \"[]\",\n      ) as string[];\n      out.push({\n        elem: elem as SVGElement,\n        stepNumbers,\n        tags,\n        steps: [], // Placeholder, populated below\n      });\n    }\n  }\n\n  // Add zero-indexed step indices\n  const firstStepNumber = Math.min(\n    ...out\n      .map(({ stepNumbers }) => stepNumbers)\n      .flat()\n      .concat([0]),\n  );\n  for (const obj of out) {\n    obj.steps = obj.stepNumbers.map((n) => n - firstStepNumber);\n  }\n\n  return out;\n}\n\n/**\n * Given an array [{stepNumbers, ...}, ...] (e.g. from findBuildSteps), returns\n * an array enumerating the full set of (maybe-not-zero-indexed) step numbers\n * used by any build specs provided.\n */\nexport function layerStepNumbers(\n  layerSteps: { stepNumbers: number[] }[],\n): number[] {\n  const allSteps = layerSteps\n    .map(({ stepNumbers }) => stepNumbers)\n    .flat()\n    .concat([0]);\n  const first = Math.min(...allSteps);\n  const last = Math.max(...allSteps);\n\n  const out = [];\n  for (let i = first; i <= last; i++) {\n    out.push(i);\n  }\n  return out;\n}\n\n/**\n * Given an array [{steps, tags}, ...], returns an Map from tag names to\n * (zero-indexed) step indices.\n */\nexport function layerStepTags(\n  layerSteps: { steps: number[]; tags: string[] }[],\n): Map<string, number[]> {\n  const map = new Map();\n  for (const { steps, tags } of layerSteps) {\n    for (const tag of tags) {\n      if (!map.has(tag)) {\n        map.set(tag, []);\n      }\n      for (const step of steps) {\n        if (map.get(tag).indexOf(step) == -1) {\n          map.get(tag).push(step);\n        }\n      }\n      map.get(tag).sort();\n    }\n  }\n\n  return map;\n}\n\n/**\n * Given an SVG element, returns a {stepNumbers, tags} for the build steps of\n * the nearest parent element with build steps specified. If no parent has any\n * build steps specified, returns null.\n */\nexport function findElementBuildSteps(\n  elem: Element,\n): { stepNumbers: number[]; tags: string[] } | null {\n  let curElem: Element | null = elem;\n  while (curElem) {\n    if (\n      curElem.namespaceURI == ns(\"svg\") &&\n      curElem.hasAttributeNS(ns(\"slidie\"), \"steps\")\n    ) {\n      const stepNumbers = JSON.parse(\n        curElem.getAttributeNS(ns(\"slidie\"), \"steps\")!,\n      );\n      const tags = JSON.parse(\n        curElem.getAttributeNS(ns(\"slidie\"), \"tags\") || \"[]\",\n      );\n      return { stepNumbers, tags };\n    }\n    curElem = curElem.parentElement;\n  }\n  return null;\n}\n", "/**\n * This module contains logic for encoding and decoding slide/step identifiers\n * in URL hashes following the scheme defined in `slidie/links.py`.\n */\nimport {\n  findBuildSteps,\n  layerStepNumbers,\n  layerStepTags,\n} from \"./buildSteps.ts\";\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Given a zero-indexed slide number and zero-indexed step index, return a URL\n * hash which encodes that position.\n */\nexport function toUrlHash(slide: number, step: number = 0): string {\n  if (step == 0) {\n    return `#${slide + 1}`;\n  } else {\n    return `#${slide + 1}#${step + 1}`;\n  }\n}\n\n/**\n * Regex which matches any potentially valid URL hash.\n */\nconst LINK_REGEX = new RegExp(\n  \"^#\" +\n    // Slide spec\n    \"(?:\" +\n    \"(?<slideIndex>[0-9]+)\" +\n    \"|\" +\n    \"(?<slideId>[^0-9#@<][^#@<]*)\" +\n    \")?\" +\n    // Build step spec\n    \"(?:\" +\n    \"(?:#(?<stepIndex>[0-9]+))\" +\n    \"|\" +\n    \"(?:<(?<stepNumber>[-+]?[0-9]+)>)\" +\n    \"|\" +\n    \"(?:@(?<stepTag>[^\\\\s<>.@]+))\" +\n    \")?\" +\n    \"$\",\n);\n\n/**\n * Parse an (already-uri-decoded) URL hash, resolving the specification into a\n * [slide, step] pair.\n *\n * Returns null if an *syntactically* invalid link is provided.\n *\n * Out-of-range slide/step numbers are returned as-is.\n *\n * When an unknown slideId is given, returns null. Conversely an unknown build\n * step tag or out-of-range build step number is given, the step is treated as\n * zero instead.\n *\n * @param currentSlide The current 0-indexed slide number. Pass a negative\n *        number to act as if no slide is currently selected.\n * @param slideIds A Map() from slide ID to slide index.\n * @param slideStepNumbers An array of arrays giving the\n *        (not-necessarily-zero-indexed) step numbers of each step for each\n *        slide.\n * @param slideTags An array of Map() from tag to an array of step\n *        indices, one per slide.\n */\nexport function parseUrlHash(\n  hash: string,\n  currentSlide: number,\n  slideIds: Map<string, number>,\n  slideStepNumbers: number[][],\n  slideTags: Map<string, number[]>[],\n): [number, number] | null {\n  const match = LINK_REGEX.exec(hash);\n  if (match === null) {\n    return null;\n  }\n  const groups = match.groups!;\n\n  // Work out slide index\n  let slide = currentSlide;\n  if (groups.slideIndex !== undefined) {\n    slide = parseInt(groups.slideIndex) - 1;\n  } else if (groups.slideId !== undefined) {\n    const slideId = groups.slideId;\n    if (slideIds.has(slideId)) {\n      slide = slideIds.get(slideId)!;\n    } else {\n      // Unknown slide ID\n      return null;\n    }\n  }\n  if (slide < 0 || slide >= slideStepNumbers.length) {\n    // Slide number out of range\n    return null;\n  }\n\n  // Work out step index\n  let step = 0;\n  if (groups.stepIndex !== undefined) {\n    step = parseInt(groups.stepIndex) - 1;\n  } else if (groups.stepNumber !== undefined) {\n    step = slideStepNumbers[slide].indexOf(parseInt(groups.stepNumber));\n    if (step < 0) {\n      // Treat non-existant step number as zero\n      step = 0;\n    }\n  } else if (groups.stepTag !== undefined) {\n    const tag = groups.stepTag;\n    if (slideTags[slide].has(tag)) {\n      step = slideTags[slide].get(tag)![0];\n    }\n  }\n\n  return [slide, step];\n}\n\n/**\n * Enumerate the complete set of absolute slide hashes.\n *\n * Does not include 'relative' hashes where the current slide is implied.\n */\nexport function enumerateAbsoluteHashes(slides: SVGSVGElement[]): string[] {\n  const out = [];\n\n  for (const [slideNum, slide] of slides.entries()) {\n    // Enumerate ways of identifying the slide\n    const slideValues = [`#${slideNum + 1}`];\n    if (slide.hasAttributeNS(ns(\"slidie\"), \"id\")) {\n      slideValues.push(`#${slide.getAttributeNS(ns(\"slidie\"), \"id\")}`);\n    }\n\n    // Enumerate ways of identifying the step\n    const stepValues = [];\n    const layerSteps = findBuildSteps(slide);\n    for (const [step, stepNumber] of layerStepNumbers(layerSteps).entries()) {\n      stepValues.push(`#${step + 1}`);\n      stepValues.push(`<${stepNumber}>`);\n    }\n    for (const tag of layerStepTags(layerSteps).keys()) {\n      stepValues.push(`@${tag}`);\n    }\n\n    // Enumerate all combinations of the above\n    for (const slideValue of slideValues) {\n      out.push(`${slideValue}`);\n      for (const stepValue of stepValues) {\n        out.push(`${slideValue}${stepValue}`);\n      }\n    }\n  }\n\n  return out;\n}\n", "/**\n * Implementation of the presenter view UI.\n */\nimport {\n  connectStepperToSpeakerNotes,\n  setupMouseClicks,\n  toggleDialog,\n} from \"./app.ts\";\nimport { keyboardEventInterferesWithHyperlink } from \"./eventFilters.ts\";\nimport { KeyboardShortcut, matchKeypress } from \"./keyboard.ts\";\nimport { Stepper, StepperState } from \"./stepper.ts\";\nimport { Stopwatch, formatDuration } from \"./stopwatch.ts\";\nimport { toUrlHash } from \"./urlHashes.ts\";\n\n/**\n * Wrapper around window.open which will return focus (and return) the same\n * window previously created with the same target if it is still open.\n *\n * Returns a [window, newlyOpened] pair.\n */\nfunction openOrFocusWindow(\n  url: string,\n  target: string,\n  windowFeatures: string = \"\",\n): [WindowProxy, boolean] {\n  const existingWindows: Map<string, WindowProxy> =\n    (openOrFocusWindow as any).existingWindows || new Map();\n  (openOrFocusWindow as any).existingWindows = existingWindows;\n\n  // Focus an existing presenter view window if present\n  const existingWindow = existingWindows.get(target);\n  if (existingWindow && !existingWindow.closed) {\n    existingWindow.focus();\n    return [existingWindow, false];\n  }\n\n  // Otherwise open a new window\n  const wnd = window.open(url, target, windowFeatures)!;\n  existingWindows.set(target, wnd);\n  return [wnd, true];\n}\n\n/**\n * Show the current slide number in the provided presenter view.\n */\nfunction connectStepperToPresenterViewSlideNumber(\n  stepper: Stepper,\n  slides: { svgs: SVGSVGElement[] },\n  presenterViewDocument: HTMLDocument,\n) {\n  const slideCount = presenterViewDocument.querySelector(\n    \"#slide-count\",\n  )! as HTMLElement;\n  const slideNumber = presenterViewDocument.querySelector(\n    \"#slide-number\",\n  )! as HTMLElement;\n\n  // Show the slide count\n  slideCount.innerText = slides.svgs.length.toString();\n\n  // Show current slide number\n  function showSlideNumber(state: StepperState) {\n    slideNumber.innerText = toUrlHash(state.slide, state.step).slice(1);\n  }\n  stepper.onChange(showSlideNumber);\n  showSlideNumber(stepper.state);\n}\n\n/**\n * Show the current and next slide thumbnails in the presenter view.\n */\nfunction connectStepperToPresenterViewThumbnails(\n  stepper: Stepper,\n  slides: { buildStepNumbers: number[][] },\n  presenterViewDocument: HTMLDocument,\n) {\n  // Grab the thumbnail Image elements from the main Slidie window (as a flat\n  // array).\n  //\n  // Storing references to the Image elments avoids both keeping an extra copy\n  // of the thumbnail data URLs hanging around or manually extracting them from\n  // slide SVGs on every step.\n  const flatThumbnails = Array.from(\n    document.querySelectorAll(\"#thumbnails .thumbnail img\"),\n  ) as HTMLImageElement[];\n\n  // Assemble a [slide][step] -> {now: Image, next: Image|null} lookup\n  type NowNext = { now: HTMLImageElement; next: HTMLImageElement | null };\n  const thumbnails: NowNext[][] = slides.buildStepNumbers.map((stepNumbers) =>\n    stepNumbers.map(() => ({\n      now: flatThumbnails.shift()!,\n      next: flatThumbnails[0] || null,\n    })),\n  );\n\n  const nowImage = presenterViewDocument.getElementById(\n    \"thumbnail-now\",\n  )! as HTMLImageElement;\n  const nextImage = presenterViewDocument.getElementById(\n    \"thumbnail-next\",\n  )! as HTMLImageElement;\n\n  function showNowNextThumbnails(state: StepperState) {\n    const { now, next } = thumbnails[state.slide][state.step];\n    nowImage.src = now.src;\n    if (next !== null) {\n      nextImage.src = next.src;\n    } else {\n      nextImage.src = \"\";\n    }\n  }\n  stepper.onChange(showNowNextThumbnails);\n  showNowNextThumbnails(stepper.state);\n}\n\n/**\n * Display the time and stopwatch, along with control buttons.\n */\nfunction connectStopwatchToPresenterView(\n  stopwatch: Stopwatch,\n  presenterViewDocument: HTMLDocument,\n) {\n  const clockElem = presenterViewDocument.getElementById(\"clock\")!;\n  const timerElem = presenterViewDocument.getElementById(\"timer\")!;\n  const pauseButton = presenterViewDocument.getElementById(\"timer-pause\")!;\n  const resetButton = presenterViewDocument.getElementById(\"timer-reset\")!;\n\n  // Continuously refresh time\n  function updateTimers() {\n    clockElem.innerText = new Date().toLocaleTimeString();\n    timerElem.innerText = formatDuration(stopwatch.read());\n\n    if (stopwatch.running) {\n      pauseButton.innerText = \"Pause\";\n      pauseButton.classList.add(\"pause\");\n      pauseButton.classList.remove(\"resume\");\n    } else {\n      if (stopwatch.read() == 0) {\n        pauseButton.innerText = \"Start\";\n      } else {\n        pauseButton.innerText = \"Resume\";\n      }\n      pauseButton.classList.add(\"resume\");\n      pauseButton.classList.remove(\"pause\");\n    }\n  }\n  window.setInterval(updateTimers, 1000);\n  updateTimers();\n\n  // Setup buttons\n  pauseButton.addEventListener(\"click\", (evt) => {\n    stopwatch.togglePause();\n    updateTimers();\n    evt.stopPropagation();\n  });\n  resetButton.addEventListener(\"click\", (evt) => {\n    stopwatch.reset();\n    updateTimers();\n    evt.stopPropagation();\n  });\n}\n\n/**\n * Defines the keyboard shortcuts specifically for presenter view\n */\ninterface PresenterViewKeyboardShortcut extends KeyboardShortcut {\n  // Displayed in the 'help' dialog\n  description: string;\n\n  // Called on matching keypress\n  action: (helpDialog: HTMLDialogElement) => void;\n}\nconst PRESENTER_VIEW_KEYBOARD_SHORTCUTS: PresenterViewKeyboardShortcut[] = [\n  {\n    description: \"Show help\",\n    keys: [\"F1\", \"?\"],\n    action: (helpDialog) => toggleDialog(helpDialog),\n  },\n];\n\n/** Clone an event object to enable it to be re-dispatched. */\nfunction cloneEvent<T extends Event>(evt: T): T {\n  // @ts-expect-error: Typescript doesn't realise we have access to the\n  // constructor...\n  return new evt.constructor(evt.type, evt);\n}\n\n/**\n * Connect up all keyboard shortcuts in the presenter view UI.\n *\n * Forwards all unrecognised keyboard shortcuts back to the main window.\n */\nfunction setupPresenterViewKeyboardShortcuts(\n  presenterViewWindow: WindowProxy,\n  helpDialog: HTMLDialogElement,\n) {\n  presenterViewWindow.addEventListener(\"keydown\", (evt) => {\n    if (keyboardEventInterferesWithHyperlink(evt)) {\n      return;\n    }\n\n    const match = matchKeypress(evt, PRESENTER_VIEW_KEYBOARD_SHORTCUTS);\n    if (match !== null) {\n      match.action(helpDialog);\n      evt.preventDefault();\n      evt.stopPropagation();\n    } else {\n      window.dispatchEvent(cloneEvent(evt));\n    }\n  });\n}\n\n/**\n * Create (or focus an existing) presenter view window and link it up to the\n * main Slidie UI. Returns a reference to the created window.\n */\nexport function showPresenterView(\n  stepper: Stepper,\n  slides: { svgs: SVGSVGElement[]; buildStepNumbers: number[][] },\n  stopwatch: Stopwatch,\n) {\n  const [wnd, newlyOpened] = openOrFocusWindow(\n    \"\",\n    \"presenter-view\",\n    \"popup=true\",\n  );\n\n  if (!newlyOpened) {\n    // Don't re-populate existing window!\n    return;\n  }\n\n  // Close the presenter view if the main Slidie window navigates away\n  window.addEventListener(\"pagehide\", () => wnd.close());\n\n  // Instantiate the presenter view template\n  const presenterViewTemplaate = document.getElementById(\n    \"presenter-view-template\",\n  ) as HTMLTemplateElement;\n  const root = (presenterViewTemplaate.content.cloneNode(true) as HTMLElement)\n    .firstElementChild!;\n  wnd.document.removeChild(wnd.document.firstElementChild!);\n  wnd.document.appendChild(root);\n\n  // Copy the (presumed fully-populated) help dialog from the main window\n  const helpDialog = document\n    .getElementById(\"help\")!\n    .cloneNode(true) as HTMLDialogElement;\n  helpDialog.close(); // Incase it is already open\n  wnd.document.body.appendChild(helpDialog);\n\n  // Setup UI\n  connectStepperToPresenterViewSlideNumber(stepper, slides, wnd.document);\n  connectStepperToSpeakerNotes(\n    stepper,\n    slides,\n    wnd.document.getElementById(\"notes\")!,\n  );\n  connectStepperToPresenterViewThumbnails(stepper, slides, wnd.document);\n  connectStopwatchToPresenterView(stopwatch, wnd.document);\n\n  // Setup keyboard and mouse shortcuts\n  setupMouseClicks(stepper, wnd);\n  setupPresenterViewKeyboardShortcuts(wnd, helpDialog);\n}\n", "/**\n * Make a HTML element resizable by dragging any visible CSS border.\n *\n * NB: Currently only top/right border dragging is implemented.\n *\n * Warning: WebKit based browsers have a bug which means that offsetX and\n * offsetY have the wrong values (see\n * https://bugs.webkit.org/show_bug.cgi?id=271694) which may prevent this\n * function working as expected. I've not yet concocted a suitable workaround.\n */\nexport function resizeOnBorderDrag(elem: HTMLElement) {\n  // Show resize cursor when mouse over borders\n  elem.addEventListener(\"mousemove\", (evt) => {\n    if (evt.offsetX - elem.clientWidth >= 0) {\n      elem.style.cursor = \"ew-resize\";\n    } else if (evt.offsetY < 0) {\n      elem.style.cursor = \"ns-resize\";\n    } else {\n      // NB: Bottom/left edges not implemented...\n      elem.style.cursor = \"auto\";\n    }\n  });\n\n  // Implement resizing logic\n  elem.addEventListener(\"mousedown\", (evt) => {\n    const style = getComputedStyle(elem);\n\n    // Detect which adjustment is being made\n    let adjust: \"width\" | \"height\";\n    let scale: number;\n    if (style.borderRightStyle == \"solid\") {\n      if (evt.offsetX - elem.clientWidth < 0) {\n        return; // Click wasn't on right border\n      }\n      adjust = \"width\";\n      scale = 1;\n    } else if (style.borderTopStyle == \"solid\") {\n      if (evt.offsetY >= 0) {\n        return; // Click wasn't on top border\n      }\n      adjust = \"height\";\n      scale = -1;\n    } else {\n      console.warn(\"Not implemented: Adjusting bottom/left edges!\");\n    }\n\n    // If we get this far, we're going to begin resizing\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    let lastX = evt.clientX;\n    let lastY = evt.clientY;\n    let width = elem.offsetWidth;\n    let height = elem.offsetHeight;\n\n    // Adjust height/width accordingly\n    function onMouseMove(evt: MouseEvent) {\n      const deltaX = evt.clientX - lastX;\n      const deltaY = evt.clientY - lastY;\n      lastX = evt.clientX;\n      lastY = evt.clientY;\n\n      if (adjust == \"width\") {\n        width += deltaX * scale;\n        elem.style.width = `${width}px`;\n      } else if (adjust == \"height\") {\n        height += deltaY * scale;\n        elem.style.height = `${height}px`;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n    function onMouseUp(evt: MouseEvent) {\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"mouseup\", onMouseMove);\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove);\n    window.addEventListener(\"mouseup\", onMouseMove); // Apply final position\n    window.addEventListener(\"mouseup\", onMouseUp);\n  });\n}\n", "/**\n * Sets the specified class on the specified element whenever the mouse hasn't\n * moved over it in the last timeout milliseconds.\n */\nexport function setClassWhileMouseIdle(\n  elem: HTMLElement,\n  className: string = \"mouse-idle\",\n  timeout: number = 2000,\n) {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\n  elem.addEventListener(\"mousemove\", () => {\n    elem.classList.remove(className);\n\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      elem.classList.add(className);\n      timeoutId = null;\n    }, timeout);\n  });\n}\n", "/**\n * This module implements the events which are dispatched to slides to inform\n * them of progress during a presentation.\n *\n * The following events (all dispatching a SlideChangeEvent object) are\n * defined which are sent to the <svg> element of the effected slide:\n *\n * * slideenter: When entering a slide (but not when the step changes)\n * * slideleave: When leaving a slide. NB: Contains the slide details of the\n *   slide which replaces it.\n * * stepchange: When the step changes within the slide (but not when initially\n *   entering the slide.\n * * slideblank: When the screen is blanked\n * * slideunblank: When the screen is unblanked. If the slide is unblanked\n *   implicitly (i.e. when moving to another next slide), the event will\n *   contain the details of the slide which replaces this slide.\n *\n * Where multiple events are arise from a single change, the events are\n * dispatched in the order listed above.\n */\nimport { Stepper, StepperState } from \"./stepper.ts\";\n\n/**\n * Valid event type names for a slide change event.\n */\nexport type SlideChangeEventType =\n  | \"slideenter\"\n  | \"slideleave\"\n  | \"stepchange\"\n  | \"slideblank\"\n  | \"slideunblank\";\n\n/**\n * An event fired when the slide (or step) changes. Contains various fields\n * which may be useful to embedded scripts.\n */\nexport class SlideChangeEvent extends Event {\n  constructor(\n    type: SlideChangeEventType,\n    state: StepperState,\n    slides: {\n      buildStepNumbers: number[][];\n      buildStepTags: Map<string, number[]>[];\n    },\n  ) {\n    super(type, {\n      // Don't bubble out of the SVG's shadow DOM\n      composed: false,\n      // The change has already occurred by the time this event is fired\n      cancelable: false,\n      // Allow bubbling up to the window of the shadow DOM\n      bubbles: true,\n    });\n\n    this.slide = state.slide;\n    this.step = state.step;\n\n    this.stepNumber = slides.buildStepNumbers[state.slide][state.step];\n\n    this.tags = [];\n    for (const [tag, steps] of slides.buildStepTags[state.slide].entries()) {\n      if (steps.indexOf(state.step) >= 0) {\n        this.tags.push(tag);\n      }\n    }\n  }\n\n  // The (zero-based) slide index\n  slide: number;\n\n  // The (zero-based) step index\n  step: number;\n\n  // The (not-necessarily zero-based) step number\n  stepNumber: number;\n\n  // The tags associated with any currently visible build steps.\n  tags: string[];\n}\n\n/**\n * Dispatch slide change events in response to changes made by the provided\n * stepper.\n */\nexport function connectStepperToSlideEvents(\n  stepper: Stepper,\n  slides: {\n    svgs: SVGSVGElement[];\n    buildStepNumbers: number[][];\n    buildStepTags: Map<string, number[]>[];\n  },\n) {\n  function dispatchEvents(state: StepperState, lastState: StepperState | null) {\n    const svg = slides.svgs[state.slide];\n\n    // Enter and leave\n    if (lastState === null || state.slide != lastState.slide) {\n      svg.dispatchEvent(new SlideChangeEvent(\"slideenter\", state, slides));\n\n      if (lastState !== null) {\n        const lastSvg = slides.svgs[lastState.slide];\n        lastSvg.dispatchEvent(\n          new SlideChangeEvent(\"slideleave\", state, slides),\n        );\n      }\n    }\n\n    // Step change\n    if (\n      lastState !== null &&\n      state.slide == lastState.slide &&\n      state.step != lastState.step\n    ) {\n      svg.dispatchEvent(new SlideChangeEvent(\"stepchange\", state, slides));\n    }\n\n    // Blanking\n    if (lastState !== null) {\n      if (state.blanked && !lastState.blanked) {\n        svg.dispatchEvent(new SlideChangeEvent(\"slideblank\", state, slides));\n      }\n      if (!state.blanked && lastState.blanked) {\n        const lastSvg = slides.svgs[lastState.slide];\n        lastSvg.dispatchEvent(\n          new SlideChangeEvent(\"slideunblank\", state, slides),\n        );\n      }\n    }\n  }\n\n  dispatchEvents(stepper.state, null);\n  stepper.onChange(dispatchEvents);\n}\n", "/**\n * The SlideLookups object provides a kitchen-sink of lookup mappings from\n * slide/step numbers to slides/SVG elements. Since many UI functions require\n * some combination of these, this singular object provides a conventient way\n * to pass these around and reuse them.\n */\nimport {\n  BuildStepVisibility,\n  findBuildSteps,\n  layerStepNumbers,\n  layerStepTags,\n} from \"./buildSteps.ts\";\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Extract the ID assigned to a slide.\n */\nfunction getSlideId(svg: SVGSVGElement): string | null {\n  if (svg.hasAttributeNS(ns(\"slidie\"), \"id\")) {\n    return svg.getAttributeNS(ns(\"slidie\"), \"id\");\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a series of slides, return a lookup from slide ID to slide index.\n */\nfunction makeIdToSlideLookup(slides: SVGSVGElement[]): Map<string, number> {\n  return new Map(\n    slides\n      .map((svg, slide) => [getSlideId(svg), slide] as [string | null, number])\n      .filter(([id]) => id !== null),\n  ) as Map<string, number>;\n}\n\n/**\n * A collection of lookups relating to slides in the currently loaded\n * presentation.\n */\nexport class SlideLookups {\n  /**\n   * Takes the SVGs (one per slide) and their corresponding container elements,\n   * e.g. as produced by loadSlidesIntoContainers.\n   */\n  constructor(svgs: SVGSVGElement[], containers: HTMLElement[]) {\n    this.svgs = svgs;\n    this.containers = containers;\n\n    this.buildSteps = this.svgs.map((slide) => findBuildSteps(slide));\n    this.buildStepTags = this.buildSteps.map((buildSteps) =>\n      layerStepTags(buildSteps),\n    );\n    this.buildStepNumbers = this.buildSteps.map((buildSteps) =>\n      layerStepNumbers(buildSteps),\n    );\n    this.buildStepCounts = this.buildStepNumbers.map(\n      (numbers) => numbers.length,\n    );\n\n    this.ids = makeIdToSlideLookup(this.svgs);\n  }\n\n  // The SVG for each slide\n  svgs: SVGSVGElement[];\n\n  // The container <div> hosting the shadow DOM for each slide\n  containers: HTMLElement[];\n\n  // For each slide, gives the number of build steps (one or more).\n  buildStepCounts: number[];\n\n  // For each slide, the visibility information for each layer controlled by a\n  // build step.\n  buildSteps: BuildStepVisibility[][];\n\n  // For each slide, the list of (not-necessarily-zero-indexed) build step\n  // numbers (in order).\n  buildStepNumbers: number[][];\n\n  // For each slide, lookup from tag to list of step indices with that tag.\n  buildStepTags: Map<string, number[]>[];\n\n  // Lookup from slide ID to slide index\n  ids: Map<string, number>;\n}\n", "import ns from \"./xmlNamespaces.ts\";\n\n/**\n * Given an SVG with embedded slidie speaker notes, return an array [{steps,\n * text}, ...].\n */\nexport function getSpeakerNotes(\n  svgRoot: SVGSVGElement,\n): { stepNumbers: number[] | null; text: string }[] {\n  const out = [];\n  for (const parentElem of svgRoot.getElementsByTagNameNS(\n    ns(\"slidie\"),\n    \"notes\",\n  )) {\n    for (const elem of parentElem.getElementsByTagNameNS(\n      ns(\"slidie\"),\n      \"note\",\n    )) {\n      let stepNumbers = null;\n      if (elem.hasAttribute(\"steps\")) {\n        stepNumbers = JSON.parse(elem.getAttribute(\"steps\")!);\n      }\n      const text = elem.innerHTML;\n\n      out.push({ stepNumbers, text });\n    }\n  }\n\n  return out;\n}\n", "/**\n * This module defines the `Stepper` class which defines the state machine for\n * advancing through a slide show.\n */\n\n/**\n * The a summary of the state of the Stepper.\n */\nexport interface StepperState {\n  // The (zero-indexed) slide number\n  slide: number;\n\n  // The (zero-indexed) step index\n  step: number;\n\n  // Is the display blanked or not?\n  blanked: boolean;\n\n  // If a user-provided URL hash was used to navigate to this slide, it is\n  // given here. Otherwise this will be null. This enables UI elements to show\n  // a consistent URL hash for the current slide/step.\n  userUrlHash: string | null;\n}\n\n/**\n * Callback signature for Stepper state changes. The first argument gives the\n * current state, the second gives the new state.\n */\ntype StepperStateChangeCallback = (\n  state: StepperState,\n  previousState: StepperState,\n) => void;\n\n/**\n * State machine for advancing through a slide show.\n *\n * The 'state' attribute gives the current state of the stepper.\n *\n * Callbacks registered via onChangeCallbacks are called whenever the state\n * changes.\n */\nexport class Stepper {\n  /**\n   * The slideStepCounts parameter gives the number of build steps for each\n   * slide.\n   *\n   * The initial slide and step (indices) set the initial slide/step to show.\n   */\n  constructor(\n    slideStepCounts: number[],\n    initialSlide: number = 0,\n    initialStep: number = 0,\n  ) {\n    if (slideStepCounts.length < 1) {\n      throw new Error(\"Slide show must have at least one slide.\");\n    }\n\n    this.slideStepCounts = slideStepCounts;\n\n    this.blanked = false;\n    this.userUrlHash = null;\n\n    this.onChangeCallbacks = [];\n\n    // Start on the specified slide\n    this.curSlide = 0;\n    this.curStep = 0;\n    this.show(initialSlide, initialStep);\n  }\n\n  // For each slide, gives the full list of (possibly-not-zero-indexed) step\n  // numbers\n  protected slideStepCounts: number[];\n\n  // The current slide index (zero-indexed)\n  protected curSlide: number;\n  // The current step index (zero-indexed)\n  protected curStep: number;\n  // Is the screen currently blanked?\n  protected blanked: boolean;\n  // The last URL hash provided (if any)\n  protected userUrlHash: string | null;\n\n  // State change callbacks\n  protected onChangeCallbacks: StepperStateChangeCallback[];\n\n  /**\n   * The current state of the stepper.\n   */\n  get state(): StepperState {\n    return {\n      slide: this.curSlide,\n      step: this.curStep,\n      blanked: this.blanked,\n      userUrlHash: this.userUrlHash,\n    };\n  }\n\n  /**\n   * Register a callback function to be called when the stepper's state\n   * changes.\n   */\n  onChange(callback: StepperStateChangeCallback) {\n    this.onChangeCallbacks.push(callback);\n  }\n\n  /**\n   * Show a particular slide/step.\n   *\n   * If a userUrlHash is given, it will be included in any reported states. Its\n   * validity is not verified and is not interpreted in any way.\n   *\n   * Returns true iff the slide was valid and we've advanced to that point,\n   * false otherwise (we'll stay where we are).\n   */\n  show(\n    slide: number,\n    step: number = 0,\n    userUrlHash: string | null = null,\n  ): boolean {\n    const beforeState = this.state;\n\n    // Check in range\n    if (\n      slide < 0 ||\n      slide >= this.slideStepCounts.length ||\n      step < 0 ||\n      step >= this.slideStepCounts[slide]\n    ) {\n      return false;\n    }\n\n    const slideChanged = this.curSlide !== slide;\n    const stepChanged = this.curStep !== step;\n    const blankedChanged = this.blanked !== false;\n\n    // Move to specified slide/step\n    this.curSlide = slide;\n    this.curStep = step;\n\n    // Unblank if currently blanked\n    this.blanked = false;\n\n    // Keep the userUrlHash until we change slide/step or set a new one.\n    //\n    // We intentionally don't clear the hash on a non-slide-change when\n    // userUrlHash is null because this will be the case for for blank/unblank\n    // events and clearing it would probably be surprising.\n    let userUrlHashChanged = false;\n    if (slideChanged || stepChanged || userUrlHash !== null) {\n      userUrlHashChanged = this.userUrlHash !== userUrlHash;\n      this.userUrlHash = userUrlHash;\n    }\n\n    // Only produce change event if we've actually changed state\n    if (slideChanged || stepChanged || blankedChanged || userUrlHashChanged) {\n      for (const cb of this.onChangeCallbacks) {\n        cb(this.state, beforeState);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Toggle blanking of the show. Returns true iff now blanked.\n   *\n   * NB: Blanking is automatically disabled when the slide/step is changed.\n   */\n  toggleBlank(): boolean {\n    const beforeState = this.state;\n    this.blanked = !this.blanked;\n    const afterState = this.state;\n\n    for (const cb of this.onChangeCallbacks) {\n      cb(afterState, beforeState);\n    }\n\n    return this.blanked;\n  }\n\n  /** Advance to the next step (and then slide). Returns true iff one exists. */\n  nextStep(): boolean {\n    let slide = this.curSlide;\n    let step = this.curStep;\n\n    if (this.blanked) {\n      // Don't advance if slide blanked, but do re-show the slide\n    } else if (step + 1 < this.slideStepCounts[slide]) {\n      step += 1;\n    } else if (slide + 1 < this.slideStepCounts.length) {\n      step = 0;\n      slide += 1;\n    } else {\n      // Already at end, no-op\n      return false;\n    }\n\n    return this.show(slide, step);\n  }\n\n  /**\n   * Advance to the first step of the next slide (skipping any remaining build\n   * steps on the current slide). Returns true iff one exists.\n   */\n  nextSlide(): boolean {\n    let slide = this.curSlide;\n    let step = this.curStep;\n\n    if (this.blanked) {\n      // Don't advance if slide blanked, but do re-show the slide\n    } else if (slide + 1 < this.slideStepCounts.length) {\n      step = 0;\n      slide += 1;\n    } else {\n      // Already at end, no-op\n      return false;\n    }\n\n    return this.show(slide, step);\n  }\n\n  /** Return to the previous step (and then slide). Returns true iff one exists. */\n  previousStep(): boolean {\n    let slide = this.curSlide;\n    let step = this.curStep;\n\n    if (this.blanked) {\n      // Don't move back if slide blanked, but do re-show the slide\n    } else if (step - 1 >= 0) {\n      step -= 1;\n    } else if (slide - 1 >= 0) {\n      slide -= 1;\n      step = this.slideStepCounts[slide] - 1;\n    } else {\n      // Already at start, no-op\n      return false;\n    }\n\n    return this.show(slide, step);\n  }\n\n  /**\n   * Return to the first step of the current slide if not already on it.\n   * Otherwise, returns to the first step of the previous slide (skipping any\n   * interevening build steps on the current slide). Returns true iff one\n   * exists.\n   */\n  previousSlide(): boolean {\n    let slide = this.curSlide;\n    let step = this.curStep;\n\n    if (this.blanked) {\n      // Don't move back if slide blanked, but do re-show the slide\n    } else if (step > 0) {\n      step = 0;\n    } else if (slide - 1 >= 0) {\n      slide -= 1;\n      step = 0;\n    } else {\n      // Already at start, no-op\n      return false;\n    }\n\n    return this.show(slide, step);\n  }\n\n  /**\n   * Go to the first build step of the first slide.\n   */\n  start(): boolean {\n    return this.show(0, 0);\n  }\n\n  /**\n   * Go to the last build step of the last slide.\n   */\n  end(): boolean {\n    const lastSlide = this.slideStepCounts.length - 1;\n    const lastStep = this.slideStepCounts[lastSlide] - 1;\n    return this.show(lastSlide, lastStep);\n  }\n}\n", "import ns from \"./xmlNamespaces.ts\";\n\n/**\n * Given an SVG with embedded slidie thumbnails, return an array of\n * (non-zerp-indexed) numbered image data URLs.\n */\nexport function getThumbnails(\n  svgRoot: SVGSVGElement,\n): { stepNumber: number; dataUrl: string }[] {\n  const out = [];\n  for (const parentElem of svgRoot.getElementsByTagNameNS(\n    ns(\"slidie\"),\n    \"thumbnails\",\n  )) {\n    for (const elem of parentElem.getElementsByTagNameNS(\n      ns(\"slidie\"),\n      \"thumbnail\",\n    )) {\n      const stepNumber = JSON.parse(elem.getAttribute(\"step\")!) as number;\n      const type = elem.getAttribute(\"type\")!;\n      const encoding = elem.getAttribute(\"encoding\")!;\n      const codedData = elem.innerHTML;\n\n      const dataUrl = `data:${type};${encoding},${codedData}`;\n\n      out.push({ stepNumber, dataUrl });\n    }\n  }\n\n  return out;\n}\n", "import { SlideChangeEvent } from \"./slideChangeEvents.ts\";\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Setup automatic video play/pause on slide entry/exit for videos inserted\n * using magic text.\n */\nexport function setupMagicVideoPlayback(slide: SVGSVGElement) {\n  for (const video of slide.getElementsByTagNameNS(\n    ns(\"xhtml\"),\n    \"video\",\n  ) as HTMLCollectionOf<HTMLVideoElement>) {\n    if (video.hasAttributeNS(ns(\"slidie\"), \"magic\")) {\n      const start = parseFloat(\n        video.getAttributeNS(ns(\"slidie\"), \"start\") || \"0\",\n      );\n      const stepNumbers = JSON.parse(\n        video.getAttributeNS(ns(\"slidie\"), \"steps\") || \"null\",\n      );\n\n      video.currentTime = start;\n\n      const onEnterOrChange = ({ stepNumber }: SlideChangeEvent) => {\n        if (stepNumbers === null || stepNumbers.indexOf(stepNumber) >= 0) {\n          video.play(); // NB: NOP if already playing\n        } else {\n          video.pause();\n          video.currentTime = start;\n        }\n      };\n\n      // @ts-expect-error: I CBA setting up type checking for custom events for now\n      slide.addEventListener(\"slideenter\", onEnterOrChange);\n      // @ts-expect-error: I CBA setting up type checking for custom events for now\n      slide.addEventListener(\"stepchange\", onEnterOrChange);\n\n      slide.addEventListener(\"slideleave\", () => {\n        video.pause();\n        video.currentTime = start;\n      });\n    }\n  }\n}\n", "/**\n * Misc browser bug workarounds.\n */\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Workaround for spec bug/shortcoming which causes the declarative shadow DOM\n * mechanism not to work in XHTML documents.\n *\n * Bonus: This also works as a polyfill for older browsers which don't support\n * the declarative shadow DOM feature.\n *\n * As of March 2024, this bug appears to effect all the major browser families:\n *\n * * HTML Spec: https://github.com/whatwg/html/issues/10237\n * * Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1887436\n * * Chromium: https://issues.chromium.org/issues/330967152\n * * Epiphany (WebKit): https://bugs.webkit.org/show_bug.cgi?id=271645\n */\nexport function workaroundDeclarativeShadowDOMXHTMLBug(\n  root: Document | DocumentFragment = document,\n) {\n  for (const template of root.querySelectorAll(\n    \"template[shadowrootmode]\",\n  ) as NodeListOf<HTMLTemplateElement>) {\n    if (template.namespaceURI === ns(\"xhtml\")) {\n      // Work-around bug which prevents us attaching a shadow root in Chrome\n      const parentNode = workaroundAttachShadowToNamespacedNodeBug(\n        template.parentNode as HTMLElement,\n      );\n\n      const mode = template.getAttribute(\"shadowrootmode\")! as ShadowRootMode;\n      const shadowRoot = parentNode.attachShadow({ mode });\n      shadowRoot.appendChild(template.content);\n      template.remove();\n\n      // Also workaround bugs resulting from having moved a video into a\n      // shadow root...\n      workaroundVideoMovedFromTemplateBug(shadowRoot);\n\n      // Recurse\n      workaroundDeclarativeShadowDOMXHTMLBug(shadowRoot);\n    }\n  }\n}\n\n/**\n * Workaround for bug which causes <video> elements moved out of a <template>\n * to fail to resolve a valid media file.\n *\n * Apply this function to a shadow DOM immediately after populating it with\n * content moved out of a <template> to ensure all <video> elements can be\n * played.\n *\n * As of March 2024, this bug observed in:\n *\n * * Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1887573\n * * Epiphany (WebKit): https://bugs.webkit.org/show_bug.cgi?id=271629\n */\nexport function workaroundVideoMovedFromTemplateBug(\n  root: Document | DocumentFragment,\n) {\n  for (const videoElem of root.querySelectorAll(\"video\")) {\n    if (videoElem.namespaceURI === ns(\"xhtml\")) {\n      const innerHTML = videoElem.innerHTML;\n      videoElem.innerHTML = \"\";\n      videoElem.innerHTML = innerHTML;\n    }\n  }\n}\n\n/**\n * Workaround for bug which prevents Chrome attaching a shadow DOM to an\n * element if it has an XML namespace in the tag name.\n *\n * Replaces the provided element with one without a namespace name in the tag\n * name. Returns the new element. The existing element is removed from the DOM\n * and all children migrated.\n *\n * This bug only appears to effect Chrome as of March 2024:\n * https://issues.chromium.org/issues/331239166\n */\nexport function workaroundAttachShadowToNamespacedNodeBug<T extends Element>(\n  elem: T,\n): T {\n  // Create replacement element\n  const replacement = elem.ownerDocument.createElementNS(\n    elem.namespaceURI,\n    elem.localName,\n  ) as T;\n  elem.parentNode!.insertBefore(replacement, elem);\n  // ...migrating the existing attributes\n  for (let i = 0; i < elem.attributes.length; i++) {\n    const { namespaceURI, localName } = elem.attributes.item(i)!;\n    replacement.attributes.setNamedItemNS(\n      elem.attributes.removeNamedItemNS(namespaceURI, localName),\n    );\n  }\n  // ...and children\n  replacement.append(...elem.childNodes);\n\n  elem.remove();\n\n  return replacement;\n}\n\n/**\n * Workaround for bug which causes hyperlinks in an SVG targeting an iframe to\n * open a new tab rather than navigating within the iframe.\n *\n * As of March 2024, this bug only appears to effect Firefox:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1887648\n */\nexport function workaroundSVGLinkTargetBug(svg: SVGSVGElement) {\n  // Create a lookup from name to iframe for this SVG\n  const iframes: Map<string, HTMLIFrameElement> = new Map();\n  for (const iframe of svg.getElementsByTagNameNS(\n    ns(\"xhtml\"),\n    \"iframe\",\n  ) as HTMLCollectionOf<HTMLIFrameElement>) {\n    const name = iframe.getAttribute(\"name\");\n    if (name) {\n      iframes.set(name, iframe);\n    }\n  }\n\n  // Manually handle opening of links targeting an iframe\n  for (const link of svg.getElementsByTagNameNS(ns(\"svg\"), \"a\")) {\n    link.addEventListener(\"click\", (evt) => {\n      const href =\n        link.getAttributeNS(ns(\"xlink\"), \"href\") || link.getAttribute(\"href\");\n      const target = link.getAttribute(\"target\");\n      if (href && target) {\n        const iframe = iframes.get(target);\n        if (iframe) {\n          iframe.contentWindow!.location = href;\n          evt.preventDefault();\n        }\n      }\n    });\n  }\n}\n", "/**\n * The main Slidie viewer application UI code.\n *\n * A good test of whether a function lives here or not is does it poke at\n * hard-coded element IDs and does it concern itself entirely with presentation\n * rather than other program logic. If the answers to these questions is yes,\n * this is probably the place.\n */\nimport { marked } from \"marked\";\n\nimport { BuildStepVisibility } from \"./buildSteps.ts\";\nimport { keyboardEventInterferesWithHyperlink } from \"./eventFilters.ts\";\nimport { eventInvolvesHyperlink } from \"./eventFilters.ts\";\nimport { setupForeignObjectScaling } from \"./foreignObjectScaling.ts\";\nimport { KeyboardShortcut, matchKeypress } from \"./keyboard.ts\";\nimport { showPresenterView } from \"./presenterView.ts\";\nimport { resizeOnBorderDrag } from \"./resizeOnBorderDrag.ts\";\nimport { setClassWhileMouseIdle } from \"./setClassWhileMouseIdle.ts\";\nimport { connectStepperToSlideEvents } from \"./slideChangeEvents.ts\";\nimport { SlideLookups } from \"./slideLookups.ts\";\nimport { getSpeakerNotes } from \"./speakerNotes.ts\";\nimport { Stepper, StepperState } from \"./stepper.ts\";\nimport { Stopwatch } from \"./stopwatch.ts\";\nimport { getThumbnails } from \"./thumbnails.ts\";\nimport {\n  enumerateAbsoluteHashes,\n  parseUrlHash,\n  toUrlHash,\n} from \"./urlHashes.ts\";\nimport { setupMagicVideoPlayback } from \"./video.ts\";\nimport {\n  workaroundDeclarativeShadowDOMXHTMLBug,\n  workaroundSVGLinkTargetBug,\n} from \"./workarounds.ts\";\nimport ns from \"./xmlNamespaces.ts\";\n\n/**\n * Find the all slide SVGs within the document.\n */\nfunction findSlides(): SlideLookups {\n  const containers = Array.from(\n    document.querySelectorAll(\"#slides .slide-container\"),\n  ) as HTMLElement[];\n\n  const svgs = containers.map(\n    (container) => container.shadowRoot!.firstElementChild!,\n  ) as SVGSVGElement[];\n\n  return new SlideLookups(svgs, containers);\n}\n\n/**\n * Show/hide slides (and build step controlled elements) based on the state of\n * the provided Stepper.\n */\nfunction connectStepperToSlideVisibility(\n  stepper: Stepper,\n  slides: {\n    containers: HTMLElement[];\n    buildSteps: BuildStepVisibility[][];\n  },\n) {\n  function updateVisibility(state: StepperState) {\n    for (const [slide, container] of slides.containers.entries()) {\n      // Set blanking mode\n      container.style.visibility = state.blanked ? \"hidden\" : \"visible\";\n\n      // Show only current slide\n      container.style.display = state.slide == slide ? \"block\" : \"none\";\n    }\n\n    // Show only the appropriate build steps for the current slide\n    for (const build of slides.buildSteps[state.slide]) {\n      build.elem.style.display =\n        build.steps.indexOf(state.step) >= 0 ? \"block\" : \"none\";\n    }\n  }\n\n  updateVisibility(stepper.state);\n  stepper.onChange(updateVisibility);\n}\n\n/**\n * Enable mouse-based resizing of the thumbnail/speaker notes panes.\n */\nfunction makeViewerPanesResizable() {\n  resizeOnBorderDrag(document.getElementById(\"thumbnails\")!);\n  resizeOnBorderDrag(document.getElementById(\"notes\")!);\n}\n\n/** Toggle the visibility of a <dialog> element. */\nexport function toggleDialog(dialog: HTMLDialogElement) {\n  if (dialog.open) {\n    dialog.close();\n  } else {\n    dialog.showModal();\n    dialog.focus();\n  }\n}\n\n/** Toggles the open state of the help dialog */\nfunction toggleHelp(document: HTMLDocument = window.document) {\n  const dialog = document.getElementById(\"help\") as HTMLDialogElement;\n  toggleDialog(dialog);\n}\n\n/**\n * Toggle full screen state of viewer (starts the stopwatch when entering full\n * screen mode).\n */\nfunction toggleFullScreen(stopwatch: Stopwatch) {\n  const slidePane = document.getElementById(\"slides\")!;\n  if (document.fullscreenElement === null) {\n    slidePane.requestFullscreen();\n    stopwatch.resume();\n  } else {\n    document.exitFullscreen();\n  }\n}\n\n/**\n * Setup the click handlers for the toolbar buttons in the slidie viewer.\n */\nfunction setupToolbarButtons(\n  stepper: Stepper,\n  slides: SlideLookups,\n  stopwatch: Stopwatch,\n) {\n  const helpButton = document.getElementById(\"show-help\")!;\n  helpButton.addEventListener(\"click\", () => toggleHelp());\n\n  const presenterViewButton = document.getElementById(\"presenter-view\")!;\n  presenterViewButton.addEventListener(\"click\", () =>\n    showPresenterView(stepper, slides, stopwatch),\n  );\n\n  const fullScreenButton = document.getElementById(\"full-screen\")!;\n  fullScreenButton.addEventListener(\"click\", () => toggleFullScreen(stopwatch));\n}\n\n/** Set the window title based on the slide metadata. */\nfunction showTitle(slides: { svgs: SVGSVGElement[] }) {\n  if (slides.svgs[0].hasAttributeNS(ns(\"slidie\"), \"title\")) {\n    const title = slides.svgs[0].getAttributeNS(ns(\"slidie\"), \"title\")!;\n    document.title = `${title} - ${document.title}`;\n    document.getElementById(\"title\")!.innerText = title;\n  }\n}\n\n/**\n * Setup the help dialog\n */\nfunction populateKeyboardHelp() {\n  const container = document.getElementById(\"help-keyboard-shortcuts\")!;\n  for (const { keys, description } of KEYBOARD_SHORTCUTS) {\n    const keysElem = document.createElementNS(ns(\"xhtml\"), \"dt\");\n    for (const [i, key] of keys.entries()) {\n      if (i > 0) {\n        keysElem.append(\" or \");\n      }\n      const kbd = document.createElementNS(ns(\"xhtml\"), \"kbd\") as HTMLElement;\n      if (KEYBOARD_KEYS_TO_SYMBOLS.has(key)) {\n        kbd.innerText = KEYBOARD_KEYS_TO_SYMBOLS.get(key)!;\n      } else {\n        kbd.innerText = key;\n      }\n      keysElem.append(kbd);\n    }\n\n    const descriptionElem = document.createElementNS(\n      ns(\"xhtml\"),\n      \"dd\",\n    ) as HTMLElement;\n    descriptionElem.innerText = description;\n\n    container.append(keysElem, descriptionElem);\n  }\n}\n\n/** Create a thumbnail for a single step. */\nfunction makeStepThumbnail(\n  image: string,\n  link: string,\n  alt: string,\n): DocumentFragment {\n  const fragment = (\n    document.getElementById(\"step-thumbnail\")! as HTMLTemplateElement\n  ).content.cloneNode(true) as DocumentFragment;\n\n  const a = fragment.querySelector(\"a\")!;\n  a.href = link;\n\n  const img = fragment.querySelector(\"img\")!;\n  img.src = image;\n  img.alt = alt;\n\n  return fragment;\n}\n\n/** Create the thumbnail group for all the steps in a slide. */\nfunction makeSlideThumbnails(\n  slide: number,\n  numberTooltip: string,\n  steps: {\n    image: string;\n    link: string;\n  }[],\n): DocumentFragment {\n  const fragment = (\n    document.getElementById(\"slide-thumbnails\")! as HTMLTemplateElement\n  ).content.cloneNode(true) as DocumentFragment;\n\n  const number = fragment.querySelector(\".slide-number\")! as HTMLElement;\n  number.innerText = (slide + 1).toString();\n  number.title = numberTooltip;\n\n  const stepThumbnailContainer = fragment.querySelector(\".step-thumbnails\")!;\n  for (const [step, { image, link }] of steps.entries()) {\n    stepThumbnailContainer.append(\n      makeStepThumbnail(\n        image,\n        link,\n        step == 0 ? `Slide {slide + 1}, step {step + 1}` : `Slide {slide + 1}`,\n      ),\n    );\n  }\n\n  return fragment;\n}\n\n/** Create the thumbnail group for all the steps in a slide. */\nfunction showThumbnails(slides: { svgs: SVGSVGElement[] }) {\n  const thumnailsContainer = document.getElementById(\"thumbnails\")!;\n\n  for (const [slide, svg] of slides.svgs.entries()) {\n    const images = getThumbnails(svg);\n    const sourceFilename = svg.getAttributeNS(ns(\"slidie\"), \"source\")!;\n    thumnailsContainer.append(\n      makeSlideThumbnails(\n        slide,\n        sourceFilename,\n        images.map(({ dataUrl }, step) => ({\n          image: dataUrl,\n          link: toUrlHash(slide, step),\n        })),\n      ),\n    );\n  }\n}\n\n/**\n * Highlight the current slide's thumbnails (and scroll it into view).\n */\nfunction connectStepperToThumbnailHighlight(stepper: Stepper) {\n  function updateHighlight(state: StepperState) {\n    for (const [slide, stepsContainer] of Array.from(\n      document.querySelectorAll(\".step-thumbnails\"),\n    ).entries()) {\n      for (const [step, stepContainer] of Array.from(\n        stepsContainer.querySelectorAll(\".thumbnail\"),\n      ).entries()) {\n        if (slide === state.slide && step === state.step) {\n          stepContainer.classList.add(\"selected\");\n          stepContainer.scrollIntoView({ block: \"nearest\", inline: \"nearest\" });\n        } else {\n          stepContainer.classList.remove(\"selected\");\n        }\n      }\n    }\n  }\n\n  updateHighlight(stepper.state);\n  stepper.onChange(updateHighlight);\n}\n\n/**\n * A wrapper around the Marked markdown parser which parses the generated HTML\n * and returns a NodeList of the corresponding elements.\n */\nfunction markdownToElements(source: string): NodeList {\n  const html = marked.parse(source) as string; // Not using async mode\n  const mdDocument = new DOMParser().parseFromString(html, \"text/html\");\n  return mdDocument.body.childNodes;\n}\n\n/**\n * Show the current slide's speaker notes (and highlight notes for the current\n * step).\n */\nexport function connectStepperToSpeakerNotes(\n  stepper: Stepper,\n  slides: { svgs: SVGSVGElement[]; buildStepNumbers: number[][] },\n  notesContainer: HTMLElement,\n) {\n  function showSpeakerNotes(\n    state: StepperState,\n    lastState: StepperState | null,\n  ) {\n    const noteTemplate = document.getElementById(\n      \"note\",\n    )! as HTMLTemplateElement;\n\n    const speakerNotes = getSpeakerNotes(slides.svgs[state.slide]);\n    const stepNumber = slides.buildStepNumbers[state.slide][state.step];\n\n    // On slide change, load the slide's notes\n    if (lastState === null || state.slide !== lastState.slide) {\n      while (notesContainer.lastChild) {\n        notesContainer.removeChild(notesContainer.lastChild);\n      }\n      for (const { text } of speakerNotes) {\n        const noteElem = noteTemplate.content.firstElementChild!.cloneNode(\n          true,\n        )! as HTMLElement;\n        markdownToElements(text).forEach((n) => noteElem.appendChild(n));\n        notesContainer.append(noteElem);\n      }\n    }\n\n    // Highlight notes for current step\n    for (const [i, { stepNumbers }] of speakerNotes.entries()) {\n      const noteElem = notesContainer.childNodes[i] as HTMLElement;\n\n      if (stepNumbers === null || stepNumbers.indexOf(stepNumber) >= 0) {\n        noteElem.classList.add(\"current\");\n      } else {\n        noteElem.classList.remove(\"current\");\n      }\n    }\n  }\n\n  showSpeakerNotes(stepper.state, null);\n  stepper.onChange(showSpeakerNotes);\n}\n\n/**\n * Connect a Stepper to the URL hash (bidirectionally).\n *\n * Do this first-thing after creating the stepper since it will immediately\n * switch to the slide indicated in the current URL hash and thus may give a\n * false slide transition.\n */\nfunction connectStepperToHash(\n  stepper: Stepper,\n  slides: {\n    ids: Map<string, number>;\n    buildStepNumbers: number[][];\n    buildStepTags: Map<string, number[]>[];\n  },\n) {\n  /** Navigate to the step indicated in the URL hash. */\n  function fromHash(state: StepperState | null = null) {\n    const hash = decodeURI(window.location.hash);\n    const slideStep = parseUrlHash(\n      hash,\n      state !== null ? state.slide : -1,\n      slides.ids,\n      slides.buildStepNumbers,\n      slides.buildStepTags,\n    );\n    const valid =\n      slideStep !== null && stepper.show(slideStep[0], slideStep[1], hash);\n\n    // Invalid hash: reset to the current slide\n    if (state !== null && !valid) {\n      console.log(state.userUrlHash);\n      window.location.hash =\n        state.userUrlHash || toUrlHash(state.slide, state.step);\n    }\n  }\n\n  /** Set the URL hash to match the stepper state */\n  function toHash(state: StepperState) {\n    window.location.hash =\n      state.userUrlHash || toUrlHash(state.slide, state.step);\n  }\n\n  // Set the initial stepper position based on the URL hash (if possible).\n  fromHash();\n  // ...and then make sure the URL hash is set (in the event that it was\n  // invalid or not set).\n  toHash(stepper.state);\n\n  // Connect up event listeners\n  stepper.onChange(toHash);\n  window.addEventListener(\"hashchange\", () => fromHash(stepper.state));\n}\n\n/**\n * Connect the numerical slide selector/display box to the current slide show\n * position.\n */\nfunction connectStepperToSlideSelector(\n  stepper: Stepper,\n  slides: {\n    svgs: SVGSVGElement[];\n    ids: Map<string, number>;\n    buildStepNumbers: number[][];\n    buildStepTags: Map<string, number[]>[];\n  },\n) {\n  // Show the slide count\n  const slideCount = document.querySelector(\n    \"#slide-selector .slide-count\",\n  )! as HTMLElement;\n  slideCount.innerText = slides.svgs.length.toString();\n\n  // Populate auto-complete for slide numbers\n  const slideList = document.getElementById(\n    \"slide-list\",\n  )! as HTMLDataListElement;\n  for (const value of enumerateAbsoluteHashes(slides.svgs)) {\n    const option = document.createElementNS(\n      ns(\"xhtml\"),\n      \"option\",\n    ) as HTMLOptionElement;\n    option.value = value.slice(1);\n    slideList.appendChild(option);\n  }\n\n  const input = document.querySelector(\n    \"#slide-selector input.slide-number\",\n  )! as HTMLInputElement;\n\n  /** Navigate to the step indicated in the input. */\n  function fromInput(evt: Event, state: StepperState) {\n    const hash = `#${input.value}`;\n    const slideStep = parseUrlHash(\n      hash,\n      state.slide,\n      slides.ids,\n      slides.buildStepNumbers,\n      slides.buildStepTags,\n    );\n    const valid =\n      slideStep !== null && stepper.show(slideStep[0], slideStep[1], hash);\n\n    if (valid) {\n      input.blur();\n      input.classList.remove(\"invalid\");\n    } else {\n      input.classList.add(\"invalid\");\n    }\n  }\n\n  /** Set the input to match the stepper state */\n  function toInput(state: StepperState) {\n    const hash = state.userUrlHash || toUrlHash(state.slide, state.step);\n    input.value = hash.slice(1);\n\n    input.classList.remove(\"invalid\");\n\n    input.style.width = `${Math.max(3, input.value.length)}em`;\n  }\n\n  // Show the current location\n  stepper.onChange(toInput);\n  toInput(stepper.state);\n\n  // Connect up event listeners\n  input.addEventListener(\"change\", (evt) => fromInput(evt, stepper.state));\n\n  // Select existing text on focus\n  input.addEventListener(\"focus\", () => {\n    input.select();\n  });\n\n  // On escape, reset to match current value and unfocus\n  input.addEventListener(\"keydown\", (evt) => {\n    if (evt.key == \"Escape\") {\n      toInput(stepper.state);\n      input.blur();\n    }\n  });\n}\n\n/**\n * Defines the keyboard shortcuts supported by the viewer.\n */\ninterface ViewerKeyboardShortcut extends KeyboardShortcut {\n  // Displayed in the 'help' dialog\n  description: string;\n\n  // Called on matching keypress\n  action: (\n    stepper: Stepper,\n    slides: SlideLookups,\n    stopwatch: Stopwatch,\n  ) => void;\n}\nconst KEYBOARD_SHORTCUTS: ViewerKeyboardShortcut[] = [\n  {\n    description: \"Next step/slide\",\n    keys: [\"Backspace\", \"ArrowUp\", \"ArrowLeft\", \"K\"],\n    action: (stepper) => stepper.previousStep(),\n  },\n  {\n    description: \"Previous step/slide\",\n    keys: [\"Enter\", \"ArrowDown\", \"ArrowRight\", \"J\"],\n    action: (stepper) => stepper.nextStep(),\n  },\n  {\n    description: \"Jump to previous slide (skip build steps)\",\n    keys: [\"PageUp\"],\n    action: (stepper) => stepper.previousSlide(),\n  },\n  {\n    description: \"Jump to next slide (skip build steps)\",\n    keys: [\"PageDown\"],\n    action: (stepper) => stepper.nextSlide(),\n  },\n  {\n    description: \"Jump to start\",\n    keys: [\"Home\"],\n    action: (stepper) => stepper.start(),\n  },\n  {\n    description: \"Jump to end\",\n    keys: [\"End\"],\n    action: (stepper) => stepper.end(),\n  },\n  {\n    description: \"Black screen\",\n    keys: [\"Z\", \"B\", \".\"],\n    action: (stepper) => stepper.toggleBlank(),\n  },\n  {\n    description: \"Toggle full screen\",\n    keys: [\"F\"],\n    action: (_stepper, _slides, stopwatch) => toggleFullScreen(stopwatch),\n  },\n  {\n    description: \"Open presenter view\",\n    keys: [\"P\"],\n    action: (stepper, slides, stopwatch) =>\n      showPresenterView(stepper, slides, stopwatch),\n  },\n  {\n    description: \"Show help\",\n    keys: [\"F1\", \"?\"],\n    action: () => toggleHelp(),\n  },\n];\n\n/**\n * Connect up all keyboard shortcuts in the UI.\n */\nfunction setupKeyboardShortcuts(\n  stepper: Stepper,\n  slides: SlideLookups,\n  stopwatch: Stopwatch,\n) {\n  window.addEventListener(\"keydown\", (evt) => {\n    if (keyboardEventInterferesWithHyperlink(evt)) {\n      return;\n    }\n\n    const match = matchKeypress(evt, KEYBOARD_SHORTCUTS);\n    if (match !== null) {\n      match.action(stepper, slides, stopwatch);\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n  });\n}\n\n/**\n * Setup mouse event handlers for changing slide.\n */\nexport function setupMouseClicks(\n  stepper: Stepper,\n  element: HTMLElement | Window | WindowProxy,\n) {\n  element.addEventListener(\"click\", (evt) => {\n    if (!eventInvolvesHyperlink(evt)) {\n      stepper.nextStep();\n      evt.preventDefault();\n      evt.stopPropagation();\n      return false;\n    }\n  });\n}\n\n/**\n * Lookup table from KeyboardEvent key names to equivalent unicode symbols.\n */\nconst KEYBOARD_KEYS_TO_SYMBOLS = new Map<string, string>([\n  [\"ArrowLeft\", \"\\u2190\"],\n  [\"ArrowUp\", \"\\u2191\"],\n  [\"ArrowRight\", \"\\u2192\"],\n  [\"ArrowDown\", \"\\u2193\"],\n  [\"Backspace\", \"\\u232B\"],\n  [\"Enter\", \"\\u23CE\"],\n]);\n\n/**\n * The top-level function which starts the Slidie viewer app running.\n */\nexport default function app() {\n  // Enumerate slides\n  workaroundDeclarativeShadowDOMXHTMLBug();\n  const slides = findSlides();\n\n  // Workaround link targets in SVGs\n  slides.svgs.map(workaroundSVGLinkTargetBug);\n\n  // Setup extra SVG display features\n  slides.svgs.map(setupForeignObjectScaling);\n  slides.svgs.map(setupMagicVideoPlayback);\n\n  // Setup Presentation state\n  const stepper = new Stepper(slides.buildStepCounts);\n  const stopwatch = new Stopwatch();\n\n  // Setup slide changing\n  connectStepperToSlideVisibility(stepper, slides);\n  connectStepperToSlideEvents(stepper, slides);\n\n  // Setup UI\n  makeViewerPanesResizable();\n  setupToolbarButtons(stepper, slides, stopwatch);\n  showTitle(slides);\n  populateKeyboardHelp();\n  showThumbnails(slides);\n  connectStepperToThumbnailHighlight(stepper);\n  connectStepperToSpeakerNotes(\n    stepper,\n    slides,\n    document.getElementById(\"notes\")!,\n  );\n  connectStepperToHash(stepper, slides);\n  connectStepperToSlideSelector(stepper, slides);\n\n  const slidePane = document.getElementById(\"slides\")!;\n\n  // Hide idle mouse cursor when in full screen\n  setClassWhileMouseIdle(slidePane);\n\n  // Setup keyboard and mouse shortcuts\n  setupKeyboardShortcuts(stepper, slides, stopwatch);\n  setupMouseClicks(stepper, slidePane);\n}\n", "import app from \"./app.ts\";\n\napp();\n"],
  "mappings": "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",
  "names": ["escape", "html", "link", "lexer", "options", "list", "tag", "text", "block", "parser", "tokens", "args", "ret", "walkTokens", "src", "elem", "tag", "tag", "evt", "tag", "link", "document", "link", "html"]
}
