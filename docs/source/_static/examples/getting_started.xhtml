<xhtml:html xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:slidie="http://xmlns.jhnet.co.uk/slidie/1.0" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
  <xhtml:head>
    <xhtml:meta charset="utf-8" />
    <xhtml:title>Slidie</xhtml:title>
    <xhtml:style>:root {
  --input-h-padding: 8px;
  
  --ui-background: #333;
  --ui-resize-handle-colour: #444;
  --ui-resize-handle-width: 8px;
}

*, *:before, *:after {
  box-sizing: border-box;
}


button {
  line-height: 2.0;
  padding: 0 var(--input-h-padding);
  text-align: center;
  white-space: nowrap;
  
  color: #fff;
  background-color: #555;
  
  border: 0;
  border-color: #777;
  border-width: 2px;
  border-style: solid;
  border-radius: 8px;
}
button:hover,
button:focus {
  outline: none;
  background-color: #666;
  border-color: #aaa;
}
button:active {
  background-color: #444;
  border-color: #555;
}


input[type=text] {
  line-height: 2.0;
  padding: 0 var(--input-h-padding);
  
  color: #fff;
  background-color: #555;
  
  border: 0;
  border-color: #777;
  border-width: 2px;
  border-style: solid;
  border-radius: 4px;
}
input[type=text]:focus {
  outline: none;
  background-color: #666;
  border-color: #aaa;
}

kbd {
  background-color: #444;
  
  border-style: solid;
  border-width: 1px;
  border-color: #aaa;
  
  border-radius: 4px;
  
  padding-top: 2px;
  padding-bottom: 2px;
  padding-left: 4px;
  padding-right: 4px;
}

dialog {
  color: inherit;
  border: none;
}

dialog#help[open] {
  overflow-y: auto;
  
  padding: 16px;
  border-radius: 8px;
  
  background-color: var(--ui-background);
  filter: drop-shadow(0px 0px 16px black);
  
  outline: none;
  
  display: grid;
  grid-template-columns: 1fr min-content;
  grid-template-rows: min-content 1fr;
}

dialog#help::backdrop {
  backdrop-filter: brightness(50%) blur(4px);
}


#help h1 {
  font-size: 120%;
  font-weight: bold;
  
  text-align: center;
  
  margin: 0;
  margin-bottom: 24px;
}

#help dl {
  display: grid;
  grid-template-columns: min-content 1fr;
  column-gap: 8px;
  row-gap: 16px;
  
  grid-column: 1/-1;
  
  margin: 0;
}

#help dl dt {
  white-space: nowrap;
  
  text-align: right;
}

#help dl dd {
  margin: 0;
}

#help button#close-help {
  width: 2em;
  height: 2em;
  
  padding: 6px;
  
  background-size: calc(2em - 12px);
  background-repeat: no-repeat;
  background-position: center center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 4.233 4.233" fill="none" stroke="white" stroke-width=".794"&gt;&lt;path d="M.281.281l3.672 3.672"/&gt;&lt;path d="M3.953.281L.281 3.953"/&gt;&lt;/svg&gt;');
}
</xhtml:style>
    <xhtml:style>body {
  margin: 0;
  padding: 0;
  width: 100dvw;
  height: 100dvh;
  
  font-family: sans-serif;
  background-color: #000000;
  color: #FFFFFF;
  
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-template-rows: min-content 1fr min-content;
}

body &gt; #toolbar {
  grid-row: 1;
  grid-column: 1/-1;
  
  background-color: var(--ui-background);
}
body &gt; #slides {
  grid-row: 2;
  grid-column: 2;
  
  /* Allow the slide to shrink to fit into the grid */
  min-width: 0;
  min-height: 0;
}
body &gt; #thumbnails {
  grid-row: 2/-1;
  grid-column: 1;
  
  width: 256px;
  
  background-color: var(--ui-background);
  
  border-color: var(--ui-resize-handle-colour);
  border-width: var(--ui-resize-handle-width);
  border-style: none;
  border-right-style: solid;
}
body &gt; #notes {
  grid-row: 3;
  grid-column: 2;
  
  height: 64px;
  
  background-color: var(--ui-background);
  
  border-color: var(--ui-resize-handle-colour);
  border-width: var(--ui-resize-handle-width);
  border-style: none;
  border-top-style: solid;
}

@media (max-aspect-ratio: 1/1) {  /* Portrait */
  body {
    grid-template-columns: 1fr;
    grid-template-rows: min-content 1fr min-content min-content;
  }
  body &gt; #slides {
    grid-row: 2;
    grid-column: 1;
  }
  body &gt; #thumbnails {
    grid-row: 4;
    grid-column: 1;
    
    width: auto !important;  /* Survive manual resizes whilst landscape */
    height: 134px;
  
    border-top-style: solid;
    border-right-style: none;
  }
  body &gt; #notes {
    grid-row: 3;
    grid-column: 1;
  }
}
@media not (max-aspect-ratio: 1/1) {  /* Landscape */
  body &gt; #thumbnails {
    height: 100% !important;  /* Survive manual resizes whilst portrait */
  }
}


#toolbar {
  display: flex;
  flex-direction: row;
  align-items: baseline;
  
  padding: 8px;
  gap: 4px;
}
#toolbar &gt; * {
  display: block;
  flex-shrink: 0;
}

#slide-selector input.slide-number {
  box-sizing: content-box;
  width: 3em;
  text-align: right;
  
  transition: width 0.2s;
}
#slide-selector input.slide-number:focus {
  width: 12em!important;  /* Override the custom resizing by JS */
}
#slide-selector input.slide-number.invalid {
  border-color: red;
}

#title {
  flex-grow: 1;
  flex-shrink: 1;
  
  text-align: center;
  font-weight: bold;
  
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  width: 0;
  
  margin-left: 1em;
  margin-right: 1em;
}

button#show-help {
  padding-left: calc(1em + 16px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 8px center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 4.233 4.233"&gt;&lt;path d="M2.452 3.09c0-.376.04-.438.381-.677.529-.376.683-.626.683-1.104C3.516.535 2.936 0 2.1 0 1.61 0 1.229.171.984.506c-.188.25-.262.523-.267.99h.774c0-.512.239-.825.632-.825.336 0 .592.279.592.654 0 .256-.068.364-.398.637-.455.387-.586.643-.569 1.127zm.091.313H1.69v.831h.853z" fill="white"/&gt;&lt;/svg&gt;');
}

button#full-screen {
  padding-left: calc(1em + 16px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 8px center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 6.35 6.35"&gt;&lt;path d="M.359 6.35l5.631-3.175L.359 0z" fill="white"/&gt;&lt;/svg&gt;');
}

button#presenter-view {
  padding-left: calc(1em + 16px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 8px center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 6.35 6.35"&gt;&lt;g fill="none" stroke="white" stroke-width=".529"&gt;&lt;path d="M.827.265v.467 1.262.65c0 .259.209.467.468.467h3.76c.259 0 .467-.208.467-.467v-.65V.732.265h-.467-3.76z"/&gt;&lt;path d="M3.175 3.111l.013 2.974m-1.208 0h2.415M0 .265h6.35"/&gt;&lt;/g&gt;&lt;path d="M1.899 1.22H4.45m-2.551.818H4.45" stroke="white" fill="white" stroke-width=".265"/&gt;&lt;/svg&gt;');
}




#slides &gt; .slide-container {
  /* Slides are hidden until explicitly displayed. */
  display: none;
  
  width: 100%;
  height: 100%;
  
  padding: 8px;
}

#slides:fullscreen.mouse-idle {
  cursor: none;
}
#slides:fullscreen &gt; .slide-container {
  padding: 0;
}


#thumbnails {
  overflow-y: auto;
  
  display: flex;
  flex-direction: column;
  gap: 24px;
  
  padding: 4px;
  padding-left: 0px;
}

.thumbnail-group {
  flex-shrink: 0;
  
  display: flex;
  
  width: 100%;
}

.thumbnail-group &gt; .slide-number-column {
  min-width: 2em;
  flex-grow: 0;
}
.thumbnail-group &gt; .step-thumbnails {
  display: flex;
  flex-direction: column;
  gap: 4px;
  
  width: 100%;
}

.slide-number {
  text-align: right;
  padding-top: 4px;
  padding-right: 8px;
  
  font-weight: bold;
  
  position: sticky;
  top: 0;
}


.thumbnail {
  border-width: 4px;
  border-style: solid;
  border-color: transparent;
  
  width: 100%;
}
.thumbnail.selected {
  border-color: red;
}

.thumbnail img {
  display: block;
  width: 100%;
}

@media (max-aspect-ratio: 1/1) {  /* Portrait */
  #thumbnails {
    overflow-x: auto;
    overflow-y: hidden;
    flex-direction: row;
  }
  .thumbnail-group {
    width: auto;
    height: 100%;
  }
  .thumbnail-group &gt; .step-thumbnails {
    flex-direction: row;
    width: auto;
    height: 100%;
  }
  .slide-number-column {
    position: sticky;
    left: 0;
    background-color: var(--ui-background);
  }
  .slide-number {
    top: 0;
    left: 0;
  }
  .thumbnail {
    width: auto;
    height: 100%;
  }
  .thumbnail img {
    max-width: none;
    width: auto;
    height: 100%;
  }
}


#notes {
  overflow-y: auto;
  padding: 8px;
  padding-top: 0;
  
  --subdued-opacity: 0.25;
  --paragraph-spacing: 8px;
}

#notes:empty::before {
  content: "No speaker notes for this slide.";
  font-style: italic;
  opacity: var(--subdued-opacity);
  
  display: block;
  margin-top: var(--paragraph-spacing);
  margin-bottom: var(--paragraph-spacing);
}

#notes p {
  margin-top: var(--paragraph-spacing);
  margin-bottom: var(--paragraph-spacing);
}

#notes &gt; .note {
  opacity: var(--subdued-opacity);
}
#notes &gt; .note.current {
  opacity: 1;
}


</xhtml:style>
    <xhtml:meta name="viewport" content="width=device-width, initial-scale=1" />
  </xhtml:head>
  <xhtml:body>
    <xhtml:nav id="toolbar">
      <xhtml:div id="slide-selector">
        <xhtml:input class="slide-number" type="text" list="slide-list" />
        of <xhtml:span class="slide-count">?</xhtml:span>
        <xhtml:datalist id="slide-list" />
      </xhtml:div>
      
      <xhtml:div id="title" />
      
      <xhtml:button id="show-help" aria-label="Help">Help</xhtml:button>
      <xhtml:button id="presenter-view">Presenter View</xhtml:button>
      <xhtml:button id="full-screen">Start</xhtml:button>
    </xhtml:nav>
    
    <xhtml:div id="slides"><xhtml:div class="slide-container"><xhtml:template shadowrootmode="open"><svg:svg width="1920" height="1080" viewBox="0 0 1920 1080" version="1.1" id="svg1" inkscape:version="1.3.2 (091e20ef0f, 2023-11-25, custom)" sodipodi:docname="00100 - Title.svg" slidie:source="examples/getting_started/00100 - Title.svg" style="display:block;width:100%;height:100%;">
  <svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" style="fill:#7b7b7b" /><sodipodi:namedview id="namedview1" pagecolor="#7b7b7b" bordercolor="#666666" borderopacity="1.0" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="px" inkscape:zoom="0.33854167" inkscape:cx="960" inkscape:cy="539.07692" inkscape:window-width="1340" inkscape:window-height="1041" inkscape:window-x="576" inkscape:window-y="18" inkscape:window-maximized="1" inkscape:current-layer="layer1" />
  <svg:defs id="defs1" />
  <svg:g inkscape:label="Layer 1" inkscape:groupmode="layer" id="layer1">
    <svg:path d="m 312.33516,524.48289 h 80.52709 v -16.6328 H 312.33516 V 460.5886 h 83.56967 v -16.63279 h -102.4337 v 147.86963 h 106.0848 v -16.6328 h -87.22077 z m 157.40303,12.37318 35.69967,-51.31827 h -19.06687 l -25.55772,38.53941 -25.55771,-38.53941 h -19.26971 l 35.49683,52.12963 -37.52522,54.15801 h 19.26971 l 26.97759,-40.77064 26.57191,40.77064 h 19.67538 z m 147.05834,45.03026 c -1.82555,0.40568 -2.6369,0.40568 -3.6511,0.40568 -5.88233,0 -9.12775,-3.04259 -9.12775,-8.3164 v -62.47442 c 0,-18.86402 -13.79306,-29.00597 -39.95929,-29.00597 -15.6186,0 -27.99178,4.46245 -35.29399,12.37318 -4.86813,5.47665 -6.89652,11.56182 -7.3022,22.10945 h 17.03848 c 1.41987,-12.9817 9.12775,-18.86403 24.94919,-18.86403 15.41577,0 23.73217,5.67949 23.73217,15.82144 v 4.46246 c -0.20284,7.3022 -3.85394,9.93911 -17.647,11.76466 -23.935,3.04259 -27.5861,3.85394 -34.07695,6.49085 -12.37318,5.27381 -18.66119,14.60441 -18.66119,28.39746 0,19.26971 13.38738,31.44005 34.88831,31.44005 13.38738,0 24.13784,-4.6653 36.10534,-15.61861 1.21704,10.95331 6.49085,15.61861 17.44416,15.61861 3.6511,0 5.88233,-0.40568 11.56182,-1.82555 z M 587.18204,558.357 c 0,5.6795 -1.62271,9.12776 -6.69369,13.79306 -6.89653,6.28801 -15.21292,9.53343 -25.15204,9.53343 -13.18453,0 -20.89241,-6.28801 -20.89241,-17.03848 0,-11.15614 7.3022,-16.83563 25.55771,-19.47254 18.05267,-2.43407 21.50094,-3.24543 27.18043,-5.88233 z m 48.0728,-72.8192 v 106.28764 h 17.03847 v -66.73403 c 0,-15.41577 11.15615,-27.78895 24.9492,-27.78895 12.57602,0 19.67538,7.70789 19.67538,21.2981 v 73.22488 h 17.03848 v -66.73403 c 0,-15.41577 11.15615,-27.78895 24.9492,-27.78895 12.37318,0 19.67538,7.91072 19.67538,21.2981 v 73.22488 h 17.03848 v -79.71573 c 0,-19.06687 -10.95331,-29.61449 -30.83153,-29.61449 -14.19873,0 -22.71797,4.25962 -32.65708,16.22712 -6.28801,-11.35899 -14.80725,-16.22712 -28.6003,-16.22712 -14.19873,0 -23.73216,5.27381 -32.65708,18.05267 V 485.5378 Z m 165.92221,150.50654 h 17.03847 v -55.37505 c 8.92492,10.95331 18.86403,15.82145 32.65708,15.82145 27.58611,0 45.43594,-22.10945 45.43594,-55.98357 0,-35.69966 -17.44415,-58.01195 -45.63878,-58.01195 -14.40157,0 -25.96339,6.49084 -33.87411,19.06686 V 485.5378 h -15.6186 z m 46.65297,-137.72768 c 18.66119,0 30.83153,16.42996 30.83153,41.78483 0,24.13784 -12.37318,40.5678 -30.83153,40.5678 -18.05267,0 -29.6145,-16.22712 -29.6145,-41.17631 0,-24.9492 11.56183,-41.17632 29.6145,-41.17632 z m 86.00369,-54.36085 h -17.03847 v 147.86963 h 17.03847 z m 118.25519,100.4053 c 0,-16.22712 -1.2171,-25.96339 -4.2597,-33.87411 -6.8965,-17.44416 -23.1236,-27.99178 -43.0018,-27.99178 -29.61452,0 -48.68138,22.51513 -48.68138,57.60627 0,35.09115 18.25551,56.38925 48.27568,56.38925 24.3407,0 41.1763,-13.79306 45.4359,-36.9167 h -17.0384 c -4.6653,13.99589 -14.1988,21.29809 -27.789,21.29809 -10.75045,0 -19.87821,-4.86813 -25.5577,-13.79305 -4.05678,-6.08517 -5.47665,-12.17034 -5.67949,-22.71797 z m -77.89021,-13.79305 c 1.41987,-19.67538 13.38737,-32.45424 30.42581,-32.45424 17.2414,0 29.2089,13.38737 29.2089,32.45424 z M 1206.0436,515.1523 c -0.2028,-20.89242 -13.9959,-32.65708 -38.5394,-32.65708 -24.7464,0 -40.7706,12.77885 -40.7706,32.45424 0,16.6328 8.5192,24.54352 33.6712,30.62869 l 15.8215,3.85394 c 11.7646,2.83974 16.4299,7.09936 16.4299,14.60441 0,10.14195 -9.9391,16.83563 -24.7463,16.83563 -9.1278,0 -16.8357,-2.6369 -21.0953,-7.09936 -2.6369,-3.04259 -3.8539,-6.08517 -4.8681,-13.59022 h -17.8499 c 0.8114,24.54352 14.6045,36.30819 42.3934,36.30819 26.7747,0 43.8132,-13.18454 43.8132,-33.67128 0,-15.82144 -8.9249,-24.54352 -30.0201,-29.61449 l -16.2272,-3.85394 c -13.793,-3.24543 -19.6754,-7.70789 -19.6754,-15.21293 0,-9.93911 8.7221,-16.02428 22.5152,-16.02428 13.5902,0 20.8924,5.88233 21.2981,17.03848 z m 43.4075,-71.19649 h -17.0384 v 147.86963 h 17.0384 z m 44.6246,41.58199 h -16.8356 v 106.28764 h 16.8356 z m 0,-41.58199 h -17.0384 v 21.29809 h 17.0384 z m 115.0098,0 h -16.8356 v 54.96937 c -7.0994,-10.75047 -18.4584,-16.42996 -32.6571,-16.42996 -27.5861,0 -45.6388,22.10945 -45.6388,55.98356 0,35.90251 17.4442,58.01196 46.2473,58.01196 14.6044,0 24.7464,-5.47666 33.8741,-18.66119 v 13.99589 h 15.0101 z m -46.6529,54.36085 c 18.2555,0 29.8173,16.02428 29.8173,41.58199 0,24.54352 -11.7647,40.77064 -29.6145,40.77064 -18.6612,0 -31.0344,-16.42996 -31.0344,-41.17631 0,-24.74636 12.3732,-41.17632 30.8316,-41.17632 z m 163.0825,46.04445 c 0,-16.22712 -1.2171,-25.96339 -4.2596,-33.87411 -6.8966,-17.44416 -23.1237,-27.99178 -43.0019,-27.99178 -29.6145,0 -48.6814,22.51513 -48.6814,57.60627 0,35.09115 18.2555,56.38925 48.2757,56.38925 24.3407,0 41.1763,-13.79306 45.4359,-36.9167 h -17.0384 c -4.6653,13.99589 -14.1988,21.29809 -27.789,21.29809 -10.7504,0 -19.8782,-4.86813 -25.5577,-13.79305 -4.0568,-6.08517 -5.4766,-12.17034 -5.6795,-22.71797 z m -77.8902,-13.79305 c 1.4199,-19.67538 13.3874,-32.45424 30.4258,-32.45424 17.2414,0 29.2089,13.38737 29.2089,32.45424 z m 174.6444,-15.41576 c -0.2028,-20.89242 -13.9959,-32.65708 -38.5394,-32.65708 -24.7464,0 -40.7706,12.77885 -40.7706,32.45424 0,16.6328 8.5192,24.54352 33.6712,30.62869 l 15.8215,3.85394 c 11.7646,2.83974 16.4299,7.09936 16.4299,14.60441 0,10.14195 -9.9391,16.83563 -24.7463,16.83563 -9.1278,0 -16.8357,-2.6369 -21.0953,-7.09936 -2.6369,-3.04259 -3.8539,-6.08517 -4.8681,-13.59022 h -17.8498 c 0.8113,24.54352 14.6044,36.30819 42.3933,36.30819 26.7748,0 43.8132,-13.18454 43.8132,-33.67128 0,-15.82144 -8.9249,-24.54352 -30.0201,-29.61449 l -16.2272,-3.85394 c -13.793,-3.24543 -19.6753,-7.70789 -19.6753,-15.21293 0,-9.93911 8.722,-16.02428 22.5151,-16.02428 13.5902,0 20.8924,5.88233 21.2981,17.03848 z" id="text1" style="font-size:202.839px;line-height:1.25;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#ffffff;stroke-width:12.6775" />
  <svg:text xml:space="preserve" style="font-size:202.839px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;stroke-width:12.6775;fill:#ffffff;fill:transparent;stroke:none" x="955.03046" y="591.82544" id="text1-selectable"><svg:tspan sodipodi:role="line" id="tspan1" x="955.03046" y="591.82544" style="text-align:center;text-anchor:middle;stroke-width:12.6775;fill:#ffffff;fill:transparent;stroke:none">Example slides</svg:tspan></svg:text>
  </svg:g>
<slidie:notes /><slidie:thumbnails>
<slidie:thumbnail step="0" type="image/png" encoding="base64"></slidie:thumbnail>
</slidie:thumbnails>
<svg:defs><svg:clipPath id="slidie-clip-to-inkscpae-pages-clip-path"><svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" /></svg:clipPath></svg:defs><svg:style>svg &gt; * { clip-path: url(#slidie-clip-to-inkscpae-pages-clip-path); }</svg:style></svg:svg></xhtml:template></xhtml:div><xhtml:div class="slide-container"><xhtml:template shadowrootmode="open"><svg:svg width="1920" height="1080" viewBox="0 0 1920 1080" version="1.1" id="svg1" inkscape:version="1.3.2 (091e20ef0f, 2023-11-25, custom)" sodipodi:docname="00200 - Introduction.svg" slidie:source="examples/getting_started/00200 - Introduction.svg" style="display:block;width:100%;height:100%;">
  <svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" style="fill:#d6d6d6" /><sodipodi:namedview id="namedview1" pagecolor="#d6d6d6" bordercolor="#666666" borderopacity="1.0" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="px" inkscape:zoom="0.33854167" inkscape:cx="960" inkscape:cy="539.07692" inkscape:window-width="1340" inkscape:window-height="1041" inkscape:window-x="576" inkscape:window-y="18" inkscape:window-maximized="1" inkscape:current-layer="layer6" />
  <svg:defs id="defs1">
    <svg:marker style="overflow:visible" id="Triangle" refX="0" refY="0" orient="auto-start-reverse" inkscape:stockid="Triangle arrow" markerWidth="1" markerHeight="1" viewBox="0 0 1 1" inkscape:isstock="true" inkscape:collect="always" preserveAspectRatio="xMidYMid">
      <svg:path transform="scale(0.5)" style="fill:context-stroke;fill-rule:evenodd;stroke:context-stroke;stroke-width:1pt" d="M 5.77,0 -2.88,5 V -5 Z" id="path135" />
    </svg:marker>
    <svg:linearGradient id="linearGradient1" inkscape:collect="always">
      <svg:stop style="stop-color:#000000;stop-opacity:1;" offset="0" id="stop1" />
      <svg:stop style="stop-color:#000000;stop-opacity:0;" offset="1" id="stop2" />
    </svg:linearGradient>
    <svg:linearGradient inkscape:collect="always" xlink:href="#linearGradient1" id="linearGradient2" x1="1059.7616" y1="1080" x2="1059.7616" y2="-5.3290705e-15" gradientUnits="userSpaceOnUse" />
  </svg:defs>
  <svg:g inkscape:label="Background" inkscape:groupmode="layer" id="layer1" sodipodi:insensitive="true">
    <svg:rect style="opacity:0.205904;fill:url(#linearGradient2);fill-opacity:1;stroke:none;stroke-width:5;stroke-linecap:round;stroke-linejoin:round" id="rect1" width="1920" height="1080" x="0" y="0" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer7" inkscape:label="Highlight square-to-triangle &lt;3&gt;" style="display:none" slidie:steps="[3]">
    <svg:ellipse style="opacity:1;fill:none;stroke:#000000;stroke-width:10.9165;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" id="path6" cx="1267.4409" cy="538.94891" rx="553.45215" ry="210.95613" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer6" inkscape:label="Highlight cirlce-to-square &lt;2&gt;" style="display:none" slidie:steps="[2]">
    <svg:ellipse style="display:inline;opacity:1;fill:none;stroke:#000000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" id="ellipse6" cx="708.53052" cy="538.94891" rx="463.41861" ry="211.41437" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer5" inkscape:label="Arrows &lt;1-&gt;" slidie:steps="[1, 2, 3]">
    <svg:path style="fill:none;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Triangle)" d="M 558.03874,538.94893 H 783.51159" id="path4" sodipodi:nodetypes="cc" />
    <svg:path style="fill:none;stroke:#000000;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#Triangle)" d="m 1100.9776,534.62814 h 225.4729" id="path5" sodipodi:nodetypes="cc" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer4" inkscape:label="Shapes">
    <svg:circle style="fill:#4e9a06;stroke:none;stroke-width:6.18692;stroke-linecap:round;stroke-linejoin:round" id="path2" cx="417.06119" cy="540.7428" r="108.5049" />
    <svg:rect style="fill:#3465a4;stroke:none;stroke-width:5.46137;stroke-linecap:round;stroke-linejoin:round" id="rect2" width="217.00999" height="217.00999" x="851.495" y="428.0076" />
    <svg:path sodipodi:type="star" style="fill:#cc0000;stroke:none;stroke-width:5;stroke-linecap:round;stroke-linejoin:round" id="path3" inkscape:flatsided="true" sodipodi:sides="3" sodipodi:cx="1330.2014" sodipodi:cy="581.08069" sodipodi:r1="133.44452" sodipodi:r2="66.72226" sodipodi:arg1="0.52359878" sodipodi:arg2="1.5707963" inkscape:rounded="0" inkscape:randomized="0" d="m 1445.7678,647.80295 -231.1327,0 115.5663,-200.16678 z" inkscape:transform-center-y="-36.168354" transform="matrix(1.0841459,0,0,1.0841459,77.592265,-50.320512)" inkscape:transform-center-x="5.4184575e-05" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer2" inkscape:label="Slide title">
    <svg:path style="font-weight:bold;font-size:109.627px;line-height:1.25;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;stroke-width:6.85171" d="m 660.16453,96.68876 h -16.44405 v 79.91808 h 16.44405 z m 14.03224,20.7195 v 59.19858 h 15.34778 v -35.51915 c 0,-7.01612 4.82359,-11.62046 12.38785,-11.62046 6.57762,0 9.86643,3.61769 9.86643,10.63382 v 36.50579 h 15.34778 v -39.68497 c 0,-13.15524 -7.12576,-20.50025 -19.84249,-20.50025 -8.00277,0 -13.37449,2.8503 -17.75957,9.53755 v -8.55091 z m 93.07332,1.2059 h -8.5509 v -15.89592 h -15.34778 v 15.89592 h -7.56427 v 10.19531 h 7.56427 v 36.39616 c 0,9.3183 4.93321,13.92263 15.0189,13.92263 3.50806,0 6.02948,-0.32888 8.87978,-1.20589 v -10.74345 c -1.53478,0.21925 -2.30216,0.32888 -3.50806,0.32888 -4.0562,0 -5.04284,-1.2059 -5.04284,-6.46799 v -32.23034 h 8.5509 z m 10.41459,-1.2059 v 59.19858 h 15.34778 v -31.46295 c 0,-8.98941 4.49471,-13.48412 13.48412,-13.48412 1.64441,0 2.74068,0.10963 4.82359,0.43851 v -15.56703 c -0.87702,-0.10963 -1.2059,-0.10963 -1.86366,-0.10963 -7.01613,0 -13.04561,4.60433 -16.44405,12.6071 v -11.62046 z m 68.62655,-0.98664 c -18.08845,0 -29.16078,11.94934 -29.16078,31.35332 0,19.51361 11.07233,31.35332 29.27041,31.35332 18.08845,0 29.27041,-11.83971 29.27041,-30.91481 0,-20.06174 -10.85308,-31.79183 -29.38004,-31.79183 z m 0.10963,12.38785 c 8.44128,0 13.92263,7.56426 13.92263,19.18473 0,11.07232 -5.70061,18.74621 -13.92263,18.74621 -8.33165,0 -13.92263,-7.56426 -13.92263,-18.96547 0,-11.40121 5.59098,-18.96547 13.92263,-18.96547 z m 78.27368,47.79737 h 15.34778 V 96.68876 h -15.34778 v 28.39339 c -3.83695,-5.91986 -8.87979,-8.66053 -16.33442,-8.66053 -14.14189,0 -24.88533,13.59375 -24.88533,31.46295 0,8.00277 2.41179,16.11517 6.35836,21.81577 4.0562,5.81023 11.29158,9.42792 18.52697,9.42792 7.45463,0 12.49747,-2.63104 16.33442,-8.5509 z m -12.93599,-47.35886 c 7.78352,0 12.93599,7.45463 12.93599,18.85584 0,10.74345 -5.2621,18.19808 -12.93599,18.19808 -7.67389,0 -12.93598,-7.56426 -12.93598,-18.41733 0,-11.07233 5.26209,-18.63659 12.93598,-18.63659 z m 94.82735,47.35886 v -59.19858 h -15.34775 v 37.05393 c 0,7.01613 -4.82359,11.62046 -12.38785,11.62046 -6.57762,0 -9.86643,-3.50806 -9.86643,-10.63382 v -38.04057 h -15.34778 v 41.21975 c 0,13.15524 7.12575,20.50025 19.84248,20.50025 8.00278,0 13.3745,-2.8503 17.75958,-9.53755 v 7.01613 z m 64.8992,-37.05392 c -1.0963,-14.47077 -10.6338,-23.1313 -25.5431,-23.1313 -17.7596,0 -27.9549,11.62046 -27.9549,31.79183 0,19.51361 10.1953,30.91481 27.7357,30.91481 14.3611,0 24.3372,-8.87978 25.7623,-23.02167 h -14.69 c -1.8637,7.67389 -4.9332,10.63382 -11.0723,10.63382 -7.7836,0 -12.3879,-6.9065 -12.3879,-18.52696 0,-5.7006 1.0963,-10.85307 2.9599,-14.36114 1.7541,-3.28881 5.1525,-5.04284 9.5376,-5.04284 6.2487,0 9.2087,2.95993 10.9627,10.74345 z m 36.8346,-20.93876 h -8.5509 v -15.89592 h -15.3478 v 15.89592 h -7.5642 v 10.19531 h 7.5642 v 36.39616 c 0,9.3183 4.9332,13.92263 15.0189,13.92263 3.5081,0 6.0295,-0.32888 8.8798,-1.20589 v -10.74345 c -1.5348,0.21925 -2.3022,0.32888 -3.5081,0.32888 -4.0562,0 -5.0428,-1.2059 -5.0428,-6.46799 v -32.23034 h 8.5509 z m 25.9815,-1.2059 h -15.3478 v 59.19858 h 15.3478 z m 0,-20.7195 h -15.3478 v 13.70337 h 15.3478 z m 40.7813,19.73286 c -18.0885,0 -29.1608,11.94934 -29.1608,31.35332 0,19.51361 11.0723,31.35332 29.2704,31.35332 18.0884,0 29.2704,-11.83971 29.2704,-30.91481 0,-20.06174 -10.8531,-31.79183 -29.38,-31.79183 z m 0.1096,12.38785 c 8.4413,0 13.9226,7.56426 13.9226,19.18473 0,11.07232 -5.7006,18.74621 -13.9226,18.74621 -8.3317,0 -13.9226,-7.56426 -13.9226,-18.96547 0,-11.40121 5.5909,-18.96547 13.9226,-18.96547 z m 40.7812,-11.40121 v 59.19858 h 15.3478 v -35.51915 c 0,-7.01612 4.8236,-11.62046 12.3879,-11.62046 6.5776,0 9.8664,3.61769 9.8664,10.63382 v 36.50579 h 15.3478 v -39.68497 c 0,-13.15524 -7.1258,-20.50025 -19.8425,-20.50025 -8.0028,0 -13.3745,2.8503 -17.7596,9.53755 v -8.55091 z" id="text1" />
  <svg:text xml:space="preserve" style="font-size:109.627px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none" x="956.43146" y="176.60684" id="text1-selectable"><svg:tspan sodipodi:role="line" id="tspan1" x="956.43146" y="176.60684" style="font-weight:bold;text-align:center;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none">Introduction</svg:tspan></svg:text>
  </svg:g>
<slidie:notes /><slidie:thumbnails>
<slidie:thumbnail step="0" type="image/png" encoding="base64"></slidie:thumbnail>
<slidie:thumbnail step="1" type="image/png" encoding="base64"></slidie:thumbnail>
<slidie:thumbnail step="2" type="image/png" encoding="base64">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</slidie:thumbnail>
<slidie:thumbnail step="3" type="image/png" encoding="base64"></slidie:thumbnail>
</slidie:thumbnails>
<svg:defs><svg:clipPath id="slidie-clip-to-inkscpae-pages-clip-path"><svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" /></svg:clipPath></svg:defs><svg:style>svg &gt; * { clip-path: url(#slidie-clip-to-inkscpae-pages-clip-path); }</svg:style></svg:svg></xhtml:template></xhtml:div><xhtml:div class="slide-container"><xhtml:template shadowrootmode="open"><svg:svg width="1920" height="1080" viewBox="0 0 1920 1080" version="1.1" id="svg1" inkscape:version="1.3.2 (091e20ef0f, 2023-11-25, custom)" sodipodi:docname="00300 - ???.svg" slidie:source="examples/getting_started/00300 - ???.svg" style="display:block;width:100%;height:100%;">
  <svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" style="fill:#d6d6d6" /><sodipodi:namedview id="namedview1" pagecolor="#d6d6d6" bordercolor="#666666" borderopacity="1.0" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="px" inkscape:zoom="0.19010417" inkscape:cx="2072.5479" inkscape:cy="539.17808" inkscape:window-width="1340" inkscape:window-height="1041" inkscape:window-x="576" inkscape:window-y="18" inkscape:window-maximized="1" inkscape:current-layer="layer2" />
  <svg:defs id="defs1">
    <svg:linearGradient id="linearGradient1" inkscape:collect="always">
      <svg:stop style="stop-color:#000000;stop-opacity:1;" offset="0" id="stop1" />
      <svg:stop style="stop-color:#000000;stop-opacity:0;" offset="1" id="stop2" />
    </svg:linearGradient>
    <svg:linearGradient inkscape:collect="always" xlink:href="#linearGradient1" id="linearGradient2" x1="1059.7616" y1="1080" x2="1059.7616" y2="-5.3290705e-15" gradientUnits="userSpaceOnUse" />
  </svg:defs>
  <svg:g inkscape:label="Background" inkscape:groupmode="layer" id="layer1" sodipodi:insensitive="true">
    <svg:rect style="opacity:0.205904;fill:url(#linearGradient2);fill-opacity:1;stroke:none;stroke-width:5;stroke-linecap:round;stroke-linejoin:round" id="rect1" width="1920" height="1080" x="0" y="0" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer2" inkscape:label="Slide title">
    <svg:path style="font-weight:bold;font-size:109.627px;line-height:1.25;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;stroke-width:6.85171" d="m 896.41067,154.57182 c 0,-7.23539 0.76738,-8.44128 7.345,-13.04562 10.19532,-7.23538 13.15524,-12.05897 13.15524,-21.26764 0,-14.90927 -11.18195,-25.214205 -27.29712,-25.214205 -9.42792,0 -16.77293,3.28881 -21.48689,9.756805 -3.61769,4.82359 -5.04284,10.08568 -5.15247,19.0751 h 14.90927 c 0,-9.86643 4.60434,-15.89592 12.1686,-15.89592 6.46799,0 11.40121,5.37172 11.40121,12.60711 0,4.93321 -1.31553,7.01612 -7.67389,12.27822 -8.77016,7.45464 -11.29158,12.38785 -10.9627,21.70615 z m 1.75403,6.02948 h -16.44405 v 16.00554 h 16.44405 z m 65.22807,-6.02948 c 0,-7.23539 0.76739,-8.44128 7.34501,-13.04562 10.19531,-7.23538 13.15524,-12.05897 13.15524,-21.26764 0,-14.90927 -11.18196,-25.214205 -27.29713,-25.214205 -9.42792,0 -16.77293,3.28881 -21.48689,9.756805 -3.61769,4.82359 -5.04284,10.08568 -5.15247,19.0751 h 14.90927 c 0,-9.86643 4.60434,-15.89592 12.1686,-15.89592 6.46799,0 11.40121,5.37172 11.40121,12.60711 0,4.93321 -1.31553,7.01612 -7.67389,12.27822 -8.77016,7.45464 -11.29158,12.38785 -10.9627,21.70615 z m 1.75403,6.02948 h -16.44405 v 16.00554 h 16.44405 z m 65.2281,-6.02948 c 0,-7.23539 0.7674,-8.44128 7.345,-13.04562 10.1953,-7.23538 13.1552,-12.05897 13.1552,-21.26764 0,-14.90927 -11.1819,-25.214205 -27.2971,-25.214205 -9.4279,0 -16.7729,3.28881 -21.4869,9.756805 -3.61769,4.82359 -5.04284,10.08568 -5.15247,19.0751 h 14.90927 c 0,-9.86643 4.6043,-15.89592 12.1686,-15.89592 6.468,0 11.4012,5.37172 11.4012,12.60711 0,4.93321 -1.3155,7.01612 -7.6739,12.27822 -8.7701,7.45464 -11.2916,12.38785 -10.9627,21.70615 z m 1.754,6.02948 h -16.444 v 16.00554 h 16.444 z" id="text1" />
    <svg:text xml:space="preserve" style="font-size:109.627px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none" x="956.43146" y="176.60684" id="text1-selectable"><svg:tspan sodipodi:role="line" id="tspan1" x="956.43146" y="176.60684" style="font-weight:bold;text-align:center;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none">???</svg:tspan></svg:text>
    <svg:path id="path6" style="opacity:0.86730021;fill:#ffffff;stroke:none;stroke-width:7.68374;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" d="m 1060.347,412.05201 c -49.4906,0.0889 -95.72971,24.6645 -123.49223,65.63477 -16.9982,-20.7939 -42.43548,-32.85577 -69.29297,-32.85742 -48.68622,0.0604 -88.39515,39.02481 -89.37695,87.70117 -50.24385,8.65151 -86.98459,52.18672 -87.06836,103.16992 -1.3e-4,57.91444 46.94884,104.86341 104.86328,104.86328 h 338.51763 c 57.9145,1.4e-4 104.8634,-46.94883 104.8633,-104.86328 -0.01,-27.24697 -10.6256,-53.42008 -29.5977,-72.97656 0.029,-0.39052 0.057,-0.78114 0.084,-1.17188 8e-4,-82.56692 -66.9331,-149.50085 -149.5,-149.5 z" sodipodi:nodetypes="ccccccccccc" />
    <svg:path id="path8" style="opacity:0.52847312;fill:#ffffff;stroke:none;stroke-width:5.43089;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" d="m 762.28334,428.07397 c -34.98012,0.0628 -67.66208,17.43295 -87.28472,46.39087 -12.01438,-14.6972 -29.99354,-23.22257 -48.9765,-23.22373 -34.41158,0.0427 -62.47799,27.58286 -63.17193,61.98748 -35.51252,6.11492 -61.481,36.88575 -61.54021,72.92084 -9e-5,40.93412 33.1836,74.11781 74.11772,74.11772 h 239.2654 c 40.93416,10e-5 74.1178,-33.18359 74.11773,-74.11772 -0.007,-19.25825 -7.51021,-37.75749 -20.91976,-51.58007 0.0205,-0.27602 0.0403,-0.55211 0.0594,-0.82829 5.6e-4,-58.35858 -47.30854,-105.6677 -105.66711,-105.6671 z" sodipodi:nodetypes="ccccccccccc" />
    <svg:path id="path9" style="opacity:0.528473;fill:#ffffff;stroke:none;stroke-width:4.86535;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" d="m 1316.2915,364.56879 c -31.3375,0.0563 -60.6162,15.6176 -78.1954,41.56004 -10.7633,-13.16673 -26.8703,-20.80433 -43.8765,-20.80537 -30.8282,0.0382 -55.9719,24.71057 -56.5937,55.53253 -31.8144,5.47816 -55.0788,33.04472 -55.1318,65.32737 -10e-5,36.67152 29.7281,66.39969 66.3997,66.39961 h 214.3499 c 36.6715,9e-5 66.3997,-29.72808 66.3996,-66.39961 -0.01,-17.25283 -6.7281,-33.82569 -18.7413,-46.20888 0.018,-0.24728 0.036,-0.49462 0.053,-0.74204 6e-4,-52.28152 -42.3821,-94.66419 -94.6636,-94.66365 z" sodipodi:nodetypes="ccccccccccc" />
  </svg:g>
<slidie:notes><slidie:note>Make sure *not* to accidentally reveal the secret ingredient!</slidie:note></slidie:notes><slidie:thumbnails>
<slidie:thumbnail step="0" type="image/png" encoding="base64"></slidie:thumbnail>
</slidie:thumbnails>
<svg:defs><svg:clipPath id="slidie-clip-to-inkscpae-pages-clip-path"><svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" /></svg:clipPath></svg:defs><svg:style>svg &gt; * { clip-path: url(#slidie-clip-to-inkscpae-pages-clip-path); }</svg:style></svg:svg></xhtml:template></xhtml:div><xhtml:div class="slide-container"><xhtml:template shadowrootmode="open"><svg:svg width="1920" height="1080" viewBox="0 0 1920 1080" version="1.1" id="svg1" inkscape:version="1.3.2 (091e20ef0f, 2023-11-25, custom)" sodipodi:docname="00400 - Profit.svg" slidie:source="examples/getting_started/00400 - Profit.svg" style="display:block;width:100%;height:100%;">
  <svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" style="fill:#d6d6d6" /><sodipodi:namedview id="namedview1" pagecolor="#d6d6d6" bordercolor="#666666" borderopacity="1.0" inkscape:showpageshadow="2" inkscape:pageopacity="0.0" inkscape:pagecheckerboard="0" inkscape:deskcolor="#d1d1d1" inkscape:document-units="px" inkscape:zoom="0.37708333" inkscape:cx="960" inkscape:cy="539.66851" inkscape:window-width="1340" inkscape:window-height="1041" inkscape:window-x="576" inkscape:window-y="18" inkscape:window-maximized="1" inkscape:current-layer="layer2" />
  <svg:defs id="defs1">
    <svg:linearGradient id="linearGradient1" inkscape:collect="always">
      <svg:stop style="stop-color:#000000;stop-opacity:1;" offset="0" id="stop1" />
      <svg:stop style="stop-color:#000000;stop-opacity:0;" offset="1" id="stop2" />
    </svg:linearGradient>
    <svg:linearGradient inkscape:collect="always" xlink:href="#linearGradient1" id="linearGradient2" x1="1059.7616" y1="1080" x2="1059.7616" y2="-5.3290705e-15" gradientUnits="userSpaceOnUse" />
  </svg:defs>
  <svg:g inkscape:label="Background" inkscape:groupmode="layer" id="layer1" sodipodi:insensitive="true">
    <svg:rect style="opacity:0.205904;fill:url(#linearGradient2);fill-opacity:1;stroke:none;stroke-width:5;stroke-linecap:round;stroke-linejoin:round" id="rect1" width="1920" height="1080" x="0" y="0" />
  </svg:g>
  <svg:g inkscape:groupmode="layer" id="layer2" inkscape:label="Content">
    <svg:path style="font-weight:bold;font-size:109.627px;line-height:1.25;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;stroke-width:6.85171" d="m 838.14389,148.10382 h 20.50025 c 14.69002,0 24.11794,-10.41456 24.11794,-26.63936 0,-16.00554 -9.09904,-24.7757 -25.76234,-24.7757 h -35.2999 v 79.91808 h 16.44405 z m 0,-13.70337 v -24.00832 h 15.34778 c 8.77016,0 12.82636,3.83695 12.82636,11.94935 0,8.22202 -4.0562,12.05897 -12.82636,12.05897 z m 55.25199,-16.99219 v 59.19858 h 15.34778 v -31.46295 c 0,-8.98941 4.4947,-13.48412 13.48412,-13.48412 1.6444,0 2.74067,0.10963 4.82359,0.43851 v -15.56703 c -0.87702,-0.10963 -1.2059,-0.10963 -1.86366,-0.10963 -7.01613,0 -13.04562,4.60433 -16.44405,12.6071 v -11.62046 z m 68.62655,-0.98664 c -18.08846,0 -29.16079,11.94934 -29.16079,31.35332 0,19.51361 11.07233,31.35332 29.27041,31.35332 18.08846,0 29.27041,-11.83971 29.27041,-30.91481 0,-20.06174 -10.85307,-31.79183 -29.38003,-31.79183 z m 0.10962,12.38785 c 8.44128,0 13.92263,7.56426 13.92263,19.18473 0,11.07232 -5.7006,18.74621 -13.92263,18.74621 -8.33165,0 -13.92263,-7.56426 -13.92263,-18.96547 0,-11.40121 5.59098,-18.96547 13.92263,-18.96547 z m 68.18805,-10.19531 h -9.0991 v -5.81023 c 0,-3.06956 1.3155,-4.60434 4.1658,-4.60434 1.4252,0 2.8503,0.10963 4.3851,0.32889 V 97.017641 c -3.2888,-0.219254 -6.468,-0.328881 -8.7701,-0.328881 -10.1954,0 -15.1286,4.82359 -15.1286,14.79964 v 7.12576 h -8.33162 v 10.19531 h 8.33162 v 47.79737 h 15.3478 v -47.79737 h 9.0991 z m 24.8853,-1.2059 h -15.3478 v 59.19858 h 15.3478 z m 0,-20.7195 h -15.3478 v 13.70337 h 15.3478 z m 40.7812,21.9254 h -8.5509 v -15.89592 h -15.3478 v 15.89592 h -7.5642 v 10.19531 h 7.5642 v 36.39616 c 0,9.3183 4.9333,13.92263 15.0189,13.92263 3.5081,0 6.0295,-0.32888 8.8798,-1.20589 v -10.74345 c -1.5347,0.21925 -2.3021,0.32888 -3.508,0.32888 -4.0562,0 -5.0429,-1.2059 -5.0429,-6.46799 v -32.23034 h 8.5509 z" id="text1" />
    <svg:text xml:space="preserve" style="font-size:109.627px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none" x="956.43146" y="176.60684" id="text1-selectable"><svg:tspan sodipodi:role="line" id="tspan1" x="956.43146" y="176.60684" style="font-weight:bold;text-align:center;text-anchor:middle;fill:#000000;stroke-width:6.85171;fill:transparent;stroke:none">Profit</svg:tspan></svg:text>
    <svg:g id="g6">
      <svg:foreignObject slidie:scale="1.0" id="rect2" x="273.20184" y="241.31454" width="1373.5963" height="772.64795"><xhtml:video preload="auto" style="display: block; width: 100%; height: 100%" slidie:steps="null" slidie:start="0.0" slidie:magic="ta-da!"><xhtml:source src="http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_30fps_normal.mp4" type="video/mp4" /></xhtml:video></svg:foreignObject></svg:g>
  </svg:g>
<slidie:notes /><slidie:thumbnails>
<slidie:thumbnail step="0" type="image/png" encoding="base64">iVBORw0KGgoAAAANSUhEUgAAAgAAAAEgCAYAAADCPMtRAAAACXBIWXMAAAPvAAAD7wHnP/QUAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAFu5JREFUeJzt3V+MXFX9APDvbKcVaVopBmPjg5QIRKAYFKOJ8Q8+YJRGo75IYpuo0aDGF9AHq9EYG8Mb1ogPEpX4pEUhRk39U4nExGhieRBaUqhVFCSkLWhrTC1t5/dAZn937t4/587O7s7M+XwS0plzzzn3fGfXe77uOXu2d/jw4UEAAFlZWOsBAACrbyQBGAxGfxhQfl82vF6s19Ympf+mPqru2dZ23DLxi7+J+MVfrid+8aeahvh7hw4dsgQAAJmxBAAAGZIAAECGJAAAkCEJAABkaCHixR2Bxd2F5Z2G5Wt1OxHr2lXVKffXds+2ezSNpeqe5briF7/4xS9+8ecUf+/RRx9dOkoAYK5ZAgCADEkAACBDEgAAyJAEAAAy1I+o3q24Enq9XtK96uoNy6uup/Q9brtJEb/4xS/+ceuJX/wTj/+RRx7xWwAAkBlLAACQIQkAAGRIAgAAGZIAAECGJAAAkCEJAABkSAIAABmSAABAhiQAAJCh/vBowYioPGawePxgSp1y3eL1Yv1yX03HHNZpOhKxrd/yGMQv/pWO/8CBA3HmzJnW+Lds2RLXXXddbN68eWrjf+GFF+Kxxx6LJ598MjZu3BiXX355XHHFFTEYDOKPf/xjnDhxYrGf7du3x6tf/erae+fy9Re/+Kct/t6f//xnRwHDKrjhhhvi/PnzyfU3bdoUH/rQh+Izn/nMCo6qu9tvvz1+85vfjDxQtm3bFj/5yU8iIuKmm26KkydPLl5773vfG3v27Fn1cQLN+ms9AKDa6dOn45577onf/va38eMf/3ithxMREd/+9rfjwIEDy+rj6aefjk9/+tOL73u9XjzwwAPLHRrQkT0AMOWeeOKJ+PznP7/Ww4iIiP379y8pW7duXbzkJS9J7uP555+PY8eOLf73l7/8ZZJDBBJV7gEov65TV6eqPKUs5Z6TJn7xr1b8ZZs3b47rr79+pM7zzz8fR48ejbNnz47U3b9/f3z1q1+Nfn+yP7TrGv+JEydG3r/1rW+Nu+++e6TslltuiWPHji2+f/vb376sz3Ml+f4Xf87x94c3Lg6i6nWdujpV5SllqRsgJkn84m97ndI2pbzoqquuWjJ5RkScO3cuduzYEc8888xi2YULF+LAgQPxrne9q7XfrrrEX97DMNz4V3THHXe03qfu2jx//XP//hf/9MVvDwBMmX6/H7t3716y+e+RRx5ZTAA++tGPxlNPPbV47bbbbosPfOAD8f3vfz++853vxKlTp2LPnj1xyy23jPRx/PjxuPPOO+PgwYNx6tSpuHDhQiwsLMTGjRvjuuuui8997nNxxRVXLBnTF77whRgMBnHmzJmR8t/97ndx4sSJeNWrXrW4rv+pT30qjh49uljnwx/+cOzatSuOHz8ed911V/zrX/9a0v/u3bsX615zzTVdPi5gTBIAmEI33njjkrLTp08vvj5y5Ej85z//WXx/7Nix2L17d/z85z9fLHvhhRdG2t99991xzz33LPl/GefPn49Tp07F73//+3j/+98f7373u+POO+8cqfOzn/2scpzDdfxNmzYtJgCPPfZYPPfcc4t1nnjiiYiI+Pvf/z4yvqJh+dVXXy0BgFUiAYAp9Ne//nVJ2aWXXlpb//Dhw3Hw4MHa63v37o3vfve7Sffev39//Pe//41vfOMbSfWB2SQBgCn0zW9+c0nZm970ptr6TZP/0aNH43vf+95IWa/Xi2uvvTauvPLK+Mc//hEPP/xwXLhwYfH6Qw89FL/61a/i5ptvjoiIXbt2xWAwiB/84AcjP1m45ppr4g1veENs3bq1NaZt27bFzp0748SJE0t+m2Dnzp0R8eKmQmB1jGwCrDo1qO4EoaFi/aYTjsrtq3ZAVl1v2lFdNc6UsbSd2CR+8a9U/EWnT5+OP/3pT4ttzpw5E0eOHIlf/vKX8fjjj4/U7ff78eY3v3lkvGUXX3xxfPCDH4wbbrgh+v1+bN++PQaDQezZs2dJDF//+tfjHe94x2J/jz/+eNx6660jm/zuuuuuuPnmm2MwGMTtt98eEREPPPDASAJw4403xh133NG6eWkwGMSWLVvis5/9bBw6dGhJAjDcODjvX//cv//FP13x94uDG76uKqt739auqX1TX019pNRNuVY3NvGLv26My42/6MiRI/Gxj32s9nrRjh07Gvtav359/OIXv6g8PvjRRx8def+2t71t8Vfzhq666qrYuXNn3HvvvYtl//znP+N///tfbNiwoXFsKbEW6zbVm/evf+7f/+KfrvgdBART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</slidie:thumbnail>
</slidie:thumbnails>
<svg:defs><svg:clipPath id="slidie-clip-to-inkscpae-pages-clip-path"><svg:rect x="0.0" y="0.0" width="1920.0" height="1080.0" /></svg:clipPath></svg:defs><svg:style>svg &gt; * { clip-path: url(#slidie-clip-to-inkscpae-pages-clip-path); }</svg:style></svg:svg></xhtml:template></xhtml:div></xhtml:div>
    
    <xhtml:div id="notes" />
    
    <xhtml:div id="thumbnails" />
    
    <xhtml:dialog id="help">
      <xhtml:h1>Slidie Keyboard Shortcuts</xhtml:h1>
      <xhtml:form method="dialog"><xhtml:button id="close-help" aria-label="Close" /></xhtml:form>
      <xhtml:dl id="help-keyboard-shortcuts" />
    </xhtml:dialog>
    
    <xhtml:template id="slide-thumbnails">
      <xhtml:div class="thumbnail-group">
        <xhtml:div class="slide-number-column">
          <xhtml:div class="slide-number" />
        </xhtml:div>
        <xhtml:div class="step-thumbnails" />
      </xhtml:div>
    </xhtml:template>
    
    <xhtml:template id="step-thumbnail">
      <xhtml:a class="thumbnail">
        <xhtml:img />
      </xhtml:a>
    </xhtml:template>
    
    <xhtml:template id="note">
      <xhtml:div class="note" />
    </xhtml:template>
    
    <xhtml:template id="presenter-view-template"><xhtml:html lang="en">
  <xhtml:head>
    <xhtml:meta charset="utf-8" />
    <xhtml:title>Slidie Presenter View</xhtml:title>
    <xhtml:style>:root {
  --input-h-padding: 8px;
  
  --ui-background: #333;
  --ui-resize-handle-colour: #444;
  --ui-resize-handle-width: 8px;
}

*, *:before, *:after {
  box-sizing: border-box;
}


button {
  line-height: 2.0;
  padding: 0 var(--input-h-padding);
  text-align: center;
  white-space: nowrap;
  
  color: #fff;
  background-color: #555;
  
  border: 0;
  border-color: #777;
  border-width: 2px;
  border-style: solid;
  border-radius: 8px;
}
button:hover,
button:focus {
  outline: none;
  background-color: #666;
  border-color: #aaa;
}
button:active {
  background-color: #444;
  border-color: #555;
}


input[type=text] {
  line-height: 2.0;
  padding: 0 var(--input-h-padding);
  
  color: #fff;
  background-color: #555;
  
  border: 0;
  border-color: #777;
  border-width: 2px;
  border-style: solid;
  border-radius: 4px;
}
input[type=text]:focus {
  outline: none;
  background-color: #666;
  border-color: #aaa;
}

kbd {
  background-color: #444;
  
  border-style: solid;
  border-width: 1px;
  border-color: #aaa;
  
  border-radius: 4px;
  
  padding-top: 2px;
  padding-bottom: 2px;
  padding-left: 4px;
  padding-right: 4px;
}

dialog {
  color: inherit;
  border: none;
}

dialog#help[open] {
  overflow-y: auto;
  
  padding: 16px;
  border-radius: 8px;
  
  background-color: var(--ui-background);
  filter: drop-shadow(0px 0px 16px black);
  
  outline: none;
  
  display: grid;
  grid-template-columns: 1fr min-content;
  grid-template-rows: min-content 1fr;
}

dialog#help::backdrop {
  backdrop-filter: brightness(50%) blur(4px);
}


#help h1 {
  font-size: 120%;
  font-weight: bold;
  
  text-align: center;
  
  margin: 0;
  margin-bottom: 24px;
}

#help dl {
  display: grid;
  grid-template-columns: min-content 1fr;
  column-gap: 8px;
  row-gap: 16px;
  
  grid-column: 1/-1;
  
  margin: 0;
}

#help dl dt {
  white-space: nowrap;
  
  text-align: right;
}

#help dl dd {
  margin: 0;
}

#help button#close-help {
  width: 2em;
  height: 2em;
  
  padding: 6px;
  
  background-size: calc(2em - 12px);
  background-repeat: no-repeat;
  background-position: center center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 4.233 4.233" fill="none" stroke="white" stroke-width=".794"&gt;&lt;path d="M.281.281l3.672 3.672"/&gt;&lt;path d="M3.953.281L.281 3.953"/&gt;&lt;/svg&gt;');
}
</xhtml:style>
    <xhtml:style>body {
  margin: 0;
  padding: 0;
  width: 100dvw;
  height: 100dvh;
  
  font-family: sans-serif;
  font-size: 200%;
  
  background-color: #333;
  color: #FFFFFF;
  
  display: grid;
  grid-template-columns: minmax(33vw, min-content) 1fr;
  grid-template-rows: 1fr min-content;
  justify-items: center;
  
  --spacing: max(1em, 5vw);
  padding: var(--spacing);
  gap: var(--spacing);
}

body &gt; #thumbnails {
  grid-row: 1;
  grid-column: 1;
}

body &gt; #notes {
  grid-row: 1;
  grid-column: 2;
}

body &gt; #status {
  grid-row: 2;
  grid-column: 1/-1;
}

@media (max-aspect-ratio: 1/1) {  /* Portrait */
  body {
    grid-template-columns: 1fr;
    grid-template-rows: min-content 1fr min-content;
  }
  body &gt; #notes {
    grid-row: 2;
    grid-column: 1;
  }
  body &gt; #status {
    grid-row: 3;
  }
}


#thumbnails {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1em;
  
  max-width: 512px;
}
#thumbnails &gt; div.now {
  width: 100%;
}
#thumbnails &gt; div.next {
  width: 50%;
}

#thumbnails img {
  width: 100%;
  display: block;
}

@media (max-aspect-ratio: 1/1) {  /* Portrait */
  #thumbnails {
    flex-direction: row;
    max-width: calc(512px + 256px + 1em);
  }
}


#notes {
  overflow-y: auto;
  padding: 8px;
  
  width: 100%;
  
  --subdued-opacity: 0.25;
  --paragraph-spacing: 1em;
}

#notes:empty::before {
  content: "No speaker notes for this slide.";
  font-style: italic;
  opacity: var(--subdued-opacity);
  
  display: block;
  margin-top: var(--paragraph-spacing);
  margin-bottom: var(--paragraph-spacing);
}

#notes p {
  margin-top: var(--paragraph-spacing);
  margin-bottom: var(--paragraph-spacing);
}

#notes &gt; .note {
  opacity: var(--subdued-opacity);
}
#notes &gt; .note.current {
  opacity: 1;
}


#status {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 2em;
}

#clock {
  padding-left: calc(1em + 8px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 0 center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467" stroke="white" stroke-width=".661"&gt;&lt;circle cx="4.233" cy="4.233" r="3.903" fill="none"/&gt;&lt;g fill="white" stroke-linecap="round"&gt;&lt;path d="M4.126 4.341V2.022"/&gt;&lt;path d="M4.126 4.341l1.14 1.121"/&gt;&lt;/g&gt;&lt;/svg&gt;');
}

.timer {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 0.5em;
  
  padding-left: calc(1em + 8px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 0 center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467"&gt;&lt;g stroke="white" stroke-width=".661"&gt;&lt;circle cx="4.233" cy="5.076" r="3.06" fill="none"/&gt;&lt;path d="M4.149 5.16l1.255-1.509" fill="white" stroke-linecap="round"/&gt;&lt;g fill="none"&gt;&lt;path d="M3.274.331h1.918"/&gt;&lt;path d="M4.233.331v1.918"/&gt;&lt;/g&gt;&lt;/g&gt;&lt;path d="M3.516.352L4.951.309m-.718.022v1.141" transform="rotate(35.194 3.308 4.442)" fill="none" stroke="white" stroke-width=".661"/&gt;&lt;path d="M3.516.352L4.951.309m-.718.022v1.068" transform="matrix(-.817205 .576347 .576347 .817205 5.301559 -1.094611)" fill="none" stroke="white" stroke-width=".661"/&gt;&lt;/svg&gt;');
}

.timer &gt; #timer {
  display: block;
  padding-right: 0.5em;
}

button#timer-pause {
  padding-left: calc(1em + 16px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 8px center;
}
button#timer-pause.resume {
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 6.35 6.35"&gt;&lt;path d="M.359 6.35l5.631-3.175L.359 0z" fill="white"/&gt;&lt;/svg&gt;');
}
button#timer-pause.pause {
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 6.35 6.35" fill="none" stroke="white" stroke-width="1.058" stroke-linecap="round"&gt;&lt;path d="M2.029 1.455v3.44m2.292-3.44v3.44"/&gt;&lt;/svg&gt;');
}

button#timer-reset {
  padding-left: calc(1em + 16px);
  background-size: 1em;
  background-repeat: no-repeat;
  background-position: 8px center;
  background-image: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 6.35 6.35"&gt;&lt;path d="M1.356 5.139c1.085 1.086 2.844 1.087 3.928.002a2.78 2.78 0 0 0-.002-3.93C4.197.125 2.438.124 1.354 1.209c-.149.149-.277.31-.385.481l-.049.081c-.081.139-.052.18-.205.432" fill="none" stroke="white" stroke-width=".529" stroke-linecap="round"/&gt;&lt;g fill="white" fill-rule="evenodd"&gt;&lt;path d="M.161 3.12l.037-1.85 1.585.959z"/&gt;&lt;path d="M.079 1.054L.034 3.331 2.03 2.233z"/&gt;&lt;/g&gt;&lt;/svg&gt;');
}

@media (max-aspect-ratio: 1/1) {  /* Portrait */
  #status {
    flex-direction: column;
    gap: 0.5em;
  }
}

#help {
  font-size: 1rem;
}
</xhtml:style>
    <xhtml:meta name="viewport" content="width=device-width, initial-scale=1" />
  </xhtml:head>
  <xhtml:body>
    <xhtml:div id="thumbnails">
      
      <xhtml:div class="now"><xhtml:img id="thumbnail-now" /></xhtml:div>
      <xhtml:div class="next"><xhtml:img id="thumbnail-next" /></xhtml:div>
    </xhtml:div>
    <xhtml:div id="notes" />
    
    <xhtml:div id="status">
      <xhtml:div class="slide-number">
        Slide <xhtml:span id="slide-number" />
        of <xhtml:span id="slide-count" />
      </xhtml:div>
      <xhtml:div id="clock" />
      <xhtml:div class="timer">
        <xhtml:span id="timer" />
        <xhtml:button id="timer-pause">Pause</xhtml:button>
        <xhtml:button id="timer-reset">Reset</xhtml:button>
      </xhtml:div>
    </xhtml:div>
  </xhtml:body>
</xhtml:html></xhtml:template>
    
    <xhtml:script>
// Though the code below is the mangled result of the Typescript
// compiler and esbuild bundler (hence the absent comments) it isn't
// minified so may still be readable... The full Typescript sources are
// embedded in the source map at the end of the script file and should
// show up in your Browser's debug tools. At the time of writing (2024)
// most browsers, however, still fail to resolve names/line numbers
// using the inline source maps within an inline script tag. Sorry.
//
// The following Javascript is built from the Typescript sources in the
// `slidie/render_xhtml/viewer/ts` directory of the Slidie source code
// which should be online at https://github.com/mossblaser/slidie.

"use strict";
(() =&gt; {
  // node_modules/marked/lib/marked.esm.js
  function _getDefaults() {
    return {
      async: false,
      breaks: false,
      extensions: null,
      gfm: true,
      hooks: null,
      pedantic: false,
      renderer: null,
      silent: false,
      tokenizer: null,
      walkTokens: null
    };
  }
  var _defaults = _getDefaults();
  function changeDefaults(newDefaults) {
    _defaults = newDefaults;
  }
  var escapeTest = /[&amp;&lt;&gt;"']/;
  var escapeReplace = new RegExp(escapeTest.source, "g");
  var escapeTestNoEncode = /[&lt;&gt;"']|&amp;(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
  var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
  var escapeReplacements = {
    "&amp;": "&amp;amp;",
    "&lt;": "&amp;lt;",
    "&gt;": "&amp;gt;",
    '"': "&amp;quot;",
    "'": "&amp;#39;"
  };
  var getEscapeReplacement = (ch) =&gt; escapeReplacements[ch];
  function escape$1(html2, encode) {
    if (encode) {
      if (escapeTest.test(html2)) {
        return html2.replace(escapeReplace, getEscapeReplacement);
      }
    } else {
      if (escapeTestNoEncode.test(html2)) {
        return html2.replace(escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html2;
  }
  var unescapeTest = /&amp;(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
  function unescape(html2) {
    return html2.replace(unescapeTest, (_, n) =&gt; {
      n = n.toLowerCase();
      if (n === "colon")
        return ":";
      if (n.charAt(0) === "#") {
        return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
      }
      return "";
    });
  }
  var caret = /(^|[^\[])\^/g;
  function edit(regex, opt) {
    let source = typeof regex === "string" ? regex : regex.source;
    opt = opt || "";
    const obj = {
      replace: (name, val) =&gt; {
        let valSource = typeof val === "string" ? val : val.source;
        valSource = valSource.replace(caret, "$1");
        source = source.replace(name, valSource);
        return obj;
      },
      getRegex: () =&gt; {
        return new RegExp(source, opt);
      }
    };
    return obj;
  }
  function cleanUrl(href) {
    try {
      href = encodeURI(href).replace(/%25/g, "%");
    } catch (e) {
      return null;
    }
    return href;
  }
  var noopTest = { exec: () =&gt; null };
  function splitCells(tableRow, count) {
    const row = tableRow.replace(/\|/g, (match, offset, str) =&gt; {
      let escaped = false;
      let curr = offset;
      while (--curr &gt;= 0 &amp;&amp; str[curr] === "\\")
        escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells = row.split(/ \|/);
    let i = 0;
    if (!cells[0].trim()) {
      cells.shift();
    }
    if (cells.length &gt; 0 &amp;&amp; !cells[cells.length - 1].trim()) {
      cells.pop();
    }
    if (count) {
      if (cells.length &gt; count) {
        cells.splice(count);
      } else {
        while (cells.length &lt; count)
          cells.push("");
      }
    }
    for (; i &lt; cells.length; i++) {
      cells[i] = cells[i].trim().replace(/\\\|/g, "|");
    }
    return cells;
  }
  function rtrim(str, c, invert) {
    const l = str.length;
    if (l === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen &lt; l) {
      const currChar = str.charAt(l - suffLen - 1);
      if (currChar === c &amp;&amp; !invert) {
        suffLen++;
      } else if (currChar !== c &amp;&amp; invert) {
        suffLen++;
      } else {
        break;
      }
    }
    return str.slice(0, l - suffLen);
  }
  function findClosingBracket(str, b) {
    if (str.indexOf(b[1]) === -1) {
      return -1;
    }
    let level = 0;
    for (let i = 0; i &lt; str.length; i++) {
      if (str[i] === "\\") {
        i++;
      } else if (str[i] === b[0]) {
        level++;
      } else if (str[i] === b[1]) {
        level--;
        if (level &lt; 0) {
          return i;
        }
      }
    }
    return -1;
  }
  function outputLink(cap, link2, raw, lexer2) {
    const href = link2.href;
    const title = link2.title ? escape$1(link2.title) : null;
    const text = cap[1].replace(/\\([\[\]])/g, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer2.state.inLink = true;
      const token = {
        type: "link",
        raw,
        href,
        title,
        text,
        tokens: lexer2.inlineTokens(text)
      };
      lexer2.state.inLink = false;
      return token;
    }
    return {
      type: "image",
      raw,
      href,
      title,
      text: escape$1(text)
    };
  }
  function indentCodeCompensation(raw, text) {
    const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
    if (matchIndentToCode === null) {
      return text;
    }
    const indentToCode = matchIndentToCode[1];
    return text.split("\n").map((node) =&gt; {
      const matchIndentInNode = node.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length &gt;= indentToCode.length) {
        return node.slice(indentToCode.length);
      }
      return node;
    }).join("\n");
  }
  var _Tokenizer = class {
    options;
    rules;
    // set by the lexer
    lexer;
    // set by the lexer
    constructor(options2) {
      this.options = options2 || _defaults;
    }
    space(src) {
      const cap = this.rules.block.newline.exec(src);
      if (cap &amp;&amp; cap[0].length &gt; 0) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
    }
    code(src) {
      const cap = this.rules.block.code.exec(src);
      if (cap) {
        const text = cap[0].replace(/^ {1,4}/gm, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text, "\n") : text
        };
      }
    }
    fences(src) {
      const cap = this.rules.block.fences.exec(src);
      if (cap) {
        const raw = cap[0];
        const text = indentCodeCompensation(raw, cap[3] || "");
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : cap[2],
          text
        };
      }
    }
    heading(src) {
      const cap = this.rules.block.heading.exec(src);
      if (cap) {
        let text = cap[2].trim();
        if (/#$/.test(text)) {
          const trimmed = rtrim(text, "#");
          if (this.options.pedantic) {
            text = trimmed.trim();
          } else if (!trimmed || / $/.test(trimmed)) {
            text = trimmed.trim();
          }
        }
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    hr(src) {
      const cap = this.rules.block.hr.exec(src);
      if (cap) {
        return {
          type: "hr",
          raw: cap[0]
        };
      }
    }
    blockquote(src) {
      const cap = this.rules.block.blockquote.exec(src);
      if (cap) {
        const text = rtrim(cap[0].replace(/^ *&gt;[ \t]?/gm, ""), "\n");
        const top = this.lexer.state.top;
        this.lexer.state.top = true;
        const tokens = this.lexer.blockTokens(text);
        this.lexer.state.top = top;
        return {
          type: "blockquote",
          raw: cap[0],
          tokens,
          text
        };
      }
    }
    list(src) {
      let cap = this.rules.block.list.exec(src);
      if (cap) {
        let bull = cap[1].trim();
        const isordered = bull.length &gt; 1;
        const list2 = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
        let raw = "";
        let itemContents = "";
        let endsWithBlankLine = false;
        while (src) {
          let endEarly = false;
          if (!(cap = itemRegex.exec(src))) {
            break;
          }
          if (this.rules.block.hr.test(src)) {
            break;
          }
          raw = cap[0];
          src = src.substring(raw.length);
          let line = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) =&gt; " ".repeat(3 * t.length));
          let nextLine = src.split("\n", 1)[0];
          let indent = 0;
          if (this.options.pedantic) {
            indent = 2;
            itemContents = line.trimStart();
          } else {
            indent = cap[2].search(/[^ ]/);
            indent = indent &gt; 4 ? 1 : indent;
            itemContents = line.slice(indent);
            indent += cap[1].length;
          }
          let blankLine = false;
          if (!line &amp;&amp; /^ *$/.test(nextLine)) {
            raw += nextLine + "\n";
            src = src.substring(nextLine.length + 1);
            endEarly = true;
          }
          if (!endEarly) {
            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
            while (src) {
              const rawLine = src.split("\n", 1)[0];
              nextLine = rawLine;
              if (this.options.pedantic) {
                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
              }
              if (fencesBeginRegex.test(nextLine)) {
                break;
              }
              if (headingBeginRegex.test(nextLine)) {
                break;
              }
              if (nextBulletRegex.test(nextLine)) {
                break;
              }
              if (hrRegex.test(src)) {
                break;
              }
              if (nextLine.search(/[^ ]/) &gt;= indent || !nextLine.trim()) {
                itemContents += "\n" + nextLine.slice(indent);
              } else {
                if (blankLine) {
                  break;
                }
                if (line.search(/[^ ]/) &gt;= 4) {
                  break;
                }
                if (fencesBeginRegex.test(line)) {
                  break;
                }
                if (headingBeginRegex.test(line)) {
                  break;
                }
                if (hrRegex.test(line)) {
                  break;
                }
                itemContents += "\n" + nextLine;
              }
              if (!blankLine &amp;&amp; !nextLine.trim()) {
                blankLine = true;
              }
              raw += rawLine + "\n";
              src = src.substring(rawLine.length + 1);
              line = nextLine.slice(indent);
            }
          }
          if (!list2.loose) {
            if (endsWithBlankLine) {
              list2.loose = true;
            } else if (/\n *\n *$/.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          let istask = null;
          let ischecked;
          if (this.options.gfm) {
            istask = /^\[[ xX]\] /.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
            }
          }
          list2.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents,
            tokens: []
          });
          list2.raw += raw;
        }
        list2.items[list2.items.length - 1].raw = raw.trimEnd();
        list2.items[list2.items.length - 1].text = itemContents.trimEnd();
        list2.raw = list2.raw.trimEnd();
        for (let i = 0; i &lt; list2.items.length; i++) {
          this.lexer.state.top = false;
          list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);
          if (!list2.loose) {
            const spacers = list2.items[i].tokens.filter((t) =&gt; t.type === "space");
            const hasMultipleLineBreaks = spacers.length &gt; 0 &amp;&amp; spacers.some((t) =&gt; /\n.*\n/.test(t.raw));
            list2.loose = hasMultipleLineBreaks;
          }
        }
        if (list2.loose) {
          for (let i = 0; i &lt; list2.items.length; i++) {
            list2.items[i].loose = true;
          }
        }
        return list2;
      }
    }
    html(src) {
      const cap = this.rules.block.html.exec(src);
      if (cap) {
        const token = {
          type: "html",
          block: true,
          raw: cap[0],
          pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
          text: cap[0]
        };
        return token;
      }
    }
    def(src) {
      const cap = this.rules.block.def.exec(src);
      if (cap) {
        const tag2 = cap[1].toLowerCase().replace(/\s+/g, " ");
        const href = cap[2] ? cap[2].replace(/^&lt;(.*)&gt;$/, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "";
        const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : cap[3];
        return {
          type: "def",
          tag: tag2,
          raw: cap[0],
          href,
          title
        };
      }
    }
    table(src) {
      const cap = this.rules.block.table.exec(src);
      if (!cap) {
        return;
      }
      if (!/[:|]/.test(cap[2])) {
        return;
      }
      const headers = splitCells(cap[1]);
      const aligns = cap[2].replace(/^\||\| *$/g, "").split("|");
      const rows = cap[3] &amp;&amp; cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : [];
      const item = {
        type: "table",
        raw: cap[0],
        header: [],
        align: [],
        rows: []
      };
      if (headers.length !== aligns.length) {
        return;
      }
      for (const align of aligns) {
        if (/^ *-+: *$/.test(align)) {
          item.align.push("right");
        } else if (/^ *:-+: *$/.test(align)) {
          item.align.push("center");
        } else if (/^ *:-+ *$/.test(align)) {
          item.align.push("left");
        } else {
          item.align.push(null);
        }
      }
      for (const header of headers) {
        item.header.push({
          text: header,
          tokens: this.lexer.inline(header)
        });
      }
      for (const row of rows) {
        item.rows.push(splitCells(row, item.header.length).map((cell) =&gt; {
          return {
            text: cell,
            tokens: this.lexer.inline(cell)
          };
        }));
      }
      return item;
    }
    lheading(src) {
      const cap = this.rules.block.lheading.exec(src);
      if (cap) {
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: this.lexer.inline(cap[1])
        };
      }
    }
    paragraph(src) {
      const cap = this.rules.block.paragraph.exec(src);
      if (cap) {
        const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
        return {
          type: "paragraph",
          raw: cap[0],
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    text(src) {
      const cap = this.rules.block.text.exec(src);
      if (cap) {
        return {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: this.lexer.inline(cap[0])
        };
      }
    }
    escape(src) {
      const cap = this.rules.inline.escape.exec(src);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: escape$1(cap[1])
        };
      }
    }
    tag(src) {
      const cap = this.rules.inline.tag.exec(src);
      if (cap) {
        if (!this.lexer.state.inLink &amp;&amp; /^&lt;a /i.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink &amp;&amp; /^&lt;\/a&gt;/i.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock &amp;&amp; /^&lt;(pre|code|kbd|script)(\s|&gt;)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock &amp;&amp; /^&lt;\/(pre|code|kbd|script)(\s|&gt;)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          block: false,
          text: cap[0]
        };
      }
    }
    link(src) {
      const cap = this.rules.inline.link.exec(src);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic &amp;&amp; /^&lt;/.test(trimmedUrl)) {
          if (!/&gt;$/.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex &gt; -1) {
            const start = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href = cap[2];
        let title = "";
        if (this.options.pedantic) {
          const link2 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
          if (link2) {
            href = link2[1];
            title = link2[3];
          }
        } else {
          title = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href = href.trim();
        if (/^&lt;/.test(href)) {
          if (this.options.pedantic &amp;&amp; !/&gt;$/.test(trimmedUrl)) {
            href = href.slice(1);
          } else {
            href = href.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href ? href.replace(this.rules.inline.anyPunctuation, "$1") : href,
          title: title ? title.replace(this.rules.inline.anyPunctuation, "$1") : title
        }, cap[0], this.lexer);
      }
    }
    reflink(src, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
        const linkString = (cap[2] || cap[1]).replace(/\s+/g, " ");
        const link2 = links[linkString.toLowerCase()];
        if (!link2) {
          const text = cap[0].charAt(0);
          return {
            type: "text",
            raw: text,
            text
          };
        }
        return outputLink(cap, link2, cap[0], this.lexer);
      }
    }
    emStrong(src, maskedSrc, prevChar = "") {
      let match = this.rules.inline.emStrongLDelim.exec(src);
      if (!match)
        return;
      if (match[3] &amp;&amp; prevChar.match(/[\p{L}\p{N}]/u))
        return;
      const nextChar = match[1] || match[2] || "";
      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
        const lLength = [...match[0]].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
        while ((match = endReg.exec(maskedSrc)) != null) {
          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
          if (!rDelim)
            continue;
          rLength = [...rDelim].length;
          if (match[3] || match[4]) {
            delimTotal += rLength;
            continue;
          } else if (match[5] || match[6]) {
            if (lLength % 3 &amp;&amp; !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal &gt; 0)
            continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          const lastCharLength = [...match[0]][0].length;
          const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
          if (Math.min(lLength, rLength) % 2) {
            const text2 = raw.slice(1, -1);
            return {
              type: "em",
              raw,
              text: text2,
              tokens: this.lexer.inlineTokens(text2)
            };
          }
          const text = raw.slice(2, -2);
          return {
            type: "strong",
            raw,
            text,
            tokens: this.lexer.inlineTokens(text)
          };
        }
      }
    }
    codespan(src) {
      const cap = this.rules.inline.code.exec(src);
      if (cap) {
        let text = cap[2].replace(/\n/g, " ");
        const hasNonSpaceChars = /[^ ]/.test(text);
        const hasSpaceCharsOnBothEnds = /^ /.test(text) &amp;&amp; / $/.test(text);
        if (hasNonSpaceChars &amp;&amp; hasSpaceCharsOnBothEnds) {
          text = text.substring(1, text.length - 1);
        }
        text = escape$1(text, true);
        return {
          type: "codespan",
          raw: cap[0],
          text
        };
      }
    }
    br(src) {
      const cap = this.rules.inline.br.exec(src);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src) {
      const cap = this.rules.inline.del.exec(src);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2])
        };
      }
    }
    autolink(src) {
      const cap = this.rules.inline.autolink.exec(src);
      if (cap) {
        let text, href;
        if (cap[2] === "@") {
          text = escape$1(cap[1]);
          href = "mailto:" + text;
        } else {
          text = escape$1(cap[1]);
          href = text;
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    url(src) {
      let cap;
      if (cap = this.rules.inline.url.exec(src)) {
        let text, href;
        if (cap[2] === "@") {
          text = escape$1(cap[0]);
          href = "mailto:" + text;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? "";
          } while (prevCapZero !== cap[0]);
          text = escape$1(cap[0]);
          if (cap[1] === "www.") {
            href = "http://" + cap[0];
          } else {
            href = cap[0];
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    inlineText(src) {
      const cap = this.rules.inline.text.exec(src);
      if (cap) {
        let text;
        if (this.lexer.state.inRawBlock) {
          text = cap[0];
        } else {
          text = escape$1(cap[0]);
        }
        return {
          type: "text",
          raw: cap[0],
          text
        };
      }
    }
  };
  var newline = /^(?: *(?:\n|$))+/;
  var blockCode = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/;
  var fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
  var hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
  var heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
  var bullet = /(?:[*+-]|\d{1,9}[.)])/;
  var lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g, bullet).replace(/blockCode/g, / {4}/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}&gt;/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}&lt;[^\n&gt;]+&gt;\n/).getRegex();
  var _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
  var blockText = /^[^\n]+/;
  var _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  var def = edit(/^ {0,3}\[(label)\]: *(?:\n *)?([^&lt;\s][^\s]*|&lt;.*?&gt;)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace("label", _blockLabel).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex();
  var list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, bullet).getRegex();
  var _tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  var _comment = /&lt;!--(?:-?&gt;|[\s\S]*?(?:--&gt;|$))/;
  var html = edit("^ {0,3}(?:&lt;(script|pre|style|textarea)[\\s&gt;][\\s\\S]*?(?:&lt;/\\1&gt;[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|&lt;\\?[\\s\\S]*?(?:\\?&gt;\\n*|$)|&lt;![A-Z][\\s\\S]*?(?:&gt;\\n*|$)|&lt;!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]&gt;\\n*|$)|&lt;/?(tag)(?: +|\\n|/?&gt;)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|&lt;(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?&gt;(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|&lt;/(?!script|pre|style|textarea)[a-z][\\w-]*\\s*&gt;(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))", "i").replace("comment", _comment).replace("tag", _tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=&lt;&gt;`]+)?/).getRegex();
  var paragraph = edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}&gt;").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "&lt;/?(?:tag)(?: +|\\n|/?&gt;)|&lt;(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
  var blockquote = edit(/^( {0,3}&gt; ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", paragraph).getRegex();
  var blockNormal = {
    blockquote,
    code: blockCode,
    def,
    fences,
    heading,
    hr,
    html,
    lheading,
    list,
    newline,
    paragraph,
    table: noopTest,
    text: blockText
  };
  var gfmTable = edit("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}&gt;").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "&lt;/?(?:tag)(?: +|\\n|/?&gt;)|&lt;(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
  var blockGfm = {
    ...blockNormal,
    table: gfmTable,
    paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", gfmTable).replace("blockquote", " {0,3}&gt;").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "&lt;/?(?:tag)(?: +|\\n|/?&gt;)|&lt;(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex()
  };
  var blockPedantic = {
    ...blockNormal,
    html: edit(`^ *(?:comment *(?:\\n|\\s*$)|&lt;(tag)[\\s\\S]+?&lt;/\\1&gt; *(?:\\n{2,}|\\s*$)|&lt;tag(?:"[^"]*"|'[^']*'|\\s[^'"/&gt;\\s]*)*?/?&gt; *(?:\\n{2,}|\\s*$))`).replace("comment", _comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *&lt;?([^\s&gt;]+)&gt;?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    // fences not supported
    lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", lheading).replace("|table", "").replace("blockquote", " {0,3}&gt;").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
  };
  var escape = /^\\([!"#$%&amp;'()*+,\-./:;&lt;=&gt;?@\[\]\\^_`{|}~])/;
  var inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
  var br = /^( {2,}|\\)\n(?!\s*$)/;
  var inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\&lt;!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
  var _punctuation = "\\p{P}\\p{S}";
  var punctuation = edit(/^((?![*_])[\spunctuation])/, "u").replace(/punctuation/g, _punctuation).getRegex();
  var blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|&lt;[^&lt;&gt;]*?&gt;/g;
  var emStrongLDelim = edit(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, "u").replace(/punct/g, _punctuation).getRegex();
  var emStrongRDelimAst = edit("^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])", "gu").replace(/punct/g, _punctuation).getRegex();
  var emStrongRDelimUnd = edit("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])", "gu").replace(/punct/g, _punctuation).getRegex();
  var anyPunctuation = edit(/\\([punct])/, "gu").replace(/punct/g, _punctuation).getRegex();
  var autolink = edit(/^&lt;(scheme:[^\s\x00-\x1f&lt;&gt;]*|email)&gt;/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();
  var _inlineComment = edit(_comment).replace("(?:--&gt;|$)", "--&gt;").getRegex();
  var tag = edit("^comment|^&lt;/[a-zA-Z][\\w:-]*\\s*&gt;|^&lt;[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?&gt;|^&lt;\\?[\\s\\S]*?\\?&gt;|^&lt;![a-zA-Z]+\\s[\\s\\S]*?&gt;|^&lt;!\\[CDATA\\[[\\s\\S]*?\\]\\]&gt;").replace("comment", _inlineComment).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=&lt;&gt;`]+)?/).getRegex();
  var _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  var link = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label", _inlineLabel).replace("href", /&lt;(?:\\.|[^\n&lt;&gt;\\])+&gt;|[^\s\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex();
  var reflink = edit(/^!?\[(label)\]\[(ref)\]/).replace("label", _inlineLabel).replace("ref", _blockLabel).getRegex();
  var nolink = edit(/^!?\[(ref)\](?:\[\])?/).replace("ref", _blockLabel).getRegex();
  var reflinkSearch = edit("reflink|nolink(?!\\()", "g").replace("reflink", reflink).replace("nolink", nolink).getRegex();
  var inlineNormal = {
    _backpedal: noopTest,
    // only used for GFM url
    anyPunctuation,
    autolink,
    blockSkip,
    br,
    code: inlineCode,
    del: noopTest,
    emStrongLDelim,
    emStrongRDelimAst,
    emStrongRDelimUnd,
    escape,
    link,
    nolink,
    punctuation,
    reflink,
    reflinkSearch,
    tag,
    text: inlineText,
    url: noopTest
  };
  var inlinePedantic = {
    ...inlineNormal,
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", _inlineLabel).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", _inlineLabel).getRegex()
  };
  var inlineGfm = {
    ...inlineNormal,
    escape: edit(escape).replace("])", "~|])").getRegex(),
    url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s&lt;]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
    _backpedal: /(?:[^?!.,:;*_'"~()&amp;]+|\([^)]*\)|&amp;(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&amp;'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\&lt;!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&amp;'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&amp;'*+\/=?_`{\|}~-]+@)))/
  };
  var inlineBreaks = {
    ...inlineGfm,
    br: edit(br).replace("{2,}", "*").getRegex(),
    text: edit(inlineGfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  };
  var block = {
    normal: blockNormal,
    gfm: blockGfm,
    pedantic: blockPedantic
  };
  var inline = {
    normal: inlineNormal,
    gfm: inlineGfm,
    breaks: inlineBreaks,
    pedantic: inlinePedantic
  };
  var _Lexer = class __Lexer {
    tokens;
    options;
    state;
    tokenizer;
    inlineQueue;
    constructor(options2) {
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options2 || _defaults;
      this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules = {
        block: block.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules.block = block.pedantic;
        rules.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules.block = block.gfm;
        if (this.options.breaks) {
          rules.inline = inline.breaks;
        } else {
          rules.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules;
    }
    /**
     * Expose Rules
     */
    static get rules() {
      return {
        block,
        inline
      };
    }
    /**
     * Static Lex Method
     */
    static lex(src, options2) {
      const lexer2 = new __Lexer(options2);
      return lexer2.lex(src);
    }
    /**
     * Static Lex Inline Method
     */
    static lexInline(src, options2) {
      const lexer2 = new __Lexer(options2);
      return lexer2.inlineTokens(src);
    }
    /**
     * Preprocessing
     */
    lex(src) {
      src = src.replace(/\r\n|\r/g, "\n");
      this.blockTokens(src, this.tokens);
      for (let i = 0; i &lt; this.inlineQueue.length; i++) {
        const next = this.inlineQueue[i];
        this.inlineTokens(next.src, next.tokens);
      }
      this.inlineQueue = [];
      return this.tokens;
    }
    blockTokens(src, tokens = []) {
      if (this.options.pedantic) {
        src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
      } else {
        src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) =&gt; {
          return leading + "    ".repeat(tabs.length);
        });
      }
      let token;
      let lastToken;
      let cutSrc;
      let lastParagraphClipped;
      while (src) {
        if (this.options.extensions &amp;&amp; this.options.extensions.block &amp;&amp; this.options.extensions.block.some((extTokenizer) =&gt; {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.space(src)) {
          src = src.substring(token.raw.length);
          if (token.raw.length === 1 &amp;&amp; tokens.length &gt; 0) {
            tokens[tokens.length - 1].raw += "\n";
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.code(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.fences(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.heading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.hr(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.blockquote(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.list(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.html(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.def(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.raw;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else if (!this.tokens.links[token.tag]) {
            this.tokens.links[token.tag] = {
              href: token.href,
              title: token.title
            };
          }
          continue;
        }
        if (token = this.tokenizer.table(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.lheading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions &amp;&amp; this.options.extensions.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach((getStartIndex) =&gt; {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" &amp;&amp; tempStart &gt;= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex &lt; Infinity &amp;&amp; startIndex &gt;= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (this.state.top &amp;&amp; (token = this.tokenizer.paragraph(cutSrc))) {
          lastToken = tokens[tokens.length - 1];
          if (lastParagraphClipped &amp;&amp; lastToken.type === "paragraph") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          lastParagraphClipped = cutSrc.length !== src.length;
          src = src.substring(token.raw.length);
          continue;
        }
        if (token = this.tokenizer.text(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; lastToken.type === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src, tokens = []) {
      this.inlineQueue.push({ src, tokens });
      return tokens;
    }
    /**
     * Lexing/Compiling
     */
    inlineTokens(src, tokens = []) {
      let token, lastToken, cutSrc;
      let maskedSrc = src;
      let match;
      let keepPrevChar, prevChar;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length &gt; 0) {
          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
      }
      while (src) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        if (this.options.extensions &amp;&amp; this.options.extensions.inline &amp;&amp; this.options.extensions.inline.some((extTokenizer) =&gt; {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.escape(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.tag(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; token.type === "text" &amp;&amp; lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.link(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; token.type === "text" &amp;&amp; lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.codespan(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.br(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.del(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.autolink(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (!this.state.inLink &amp;&amp; (token = this.tokenizer.url(src))) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions &amp;&amp; this.options.extensions.startInline) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach((getStartIndex) =&gt; {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" &amp;&amp; tempStart &gt;= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex &lt; Infinity &amp;&amp; startIndex &gt;= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (token = this.tokenizer.inlineText(cutSrc)) {
          src = src.substring(token.raw.length);
          if (token.raw.slice(-1) !== "_") {
            prevChar = token.raw.slice(-1);
          }
          keepPrevChar = true;
          lastToken = tokens[tokens.length - 1];
          if (lastToken &amp;&amp; lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  };
  var _Renderer = class {
    options;
    constructor(options2) {
      this.options = options2 || _defaults;
    }
    code(code, infostring, escaped) {
      const lang = (infostring || "").match(/^\S*/)?.[0];
      code = code.replace(/\n$/, "") + "\n";
      if (!lang) {
        return "&lt;pre&gt;&lt;code&gt;" + (escaped ? code : escape$1(code, true)) + "&lt;/code&gt;&lt;/pre&gt;\n";
      }
      return '&lt;pre&gt;&lt;code class="language-' + escape$1(lang) + '"&gt;' + (escaped ? code : escape$1(code, true)) + "&lt;/code&gt;&lt;/pre&gt;\n";
    }
    blockquote(quote) {
      return `&lt;blockquote&gt;
${quote}&lt;/blockquote&gt;
`;
    }
    html(html2, block2) {
      return html2;
    }
    heading(text, level, raw) {
      return `&lt;h${level}&gt;${text}&lt;/h${level}&gt;
`;
    }
    hr() {
      return "&lt;hr&gt;\n";
    }
    list(body, ordered, start) {
      const type = ordered ? "ol" : "ul";
      const startatt = ordered &amp;&amp; start !== 1 ? ' start="' + start + '"' : "";
      return "&lt;" + type + startatt + "&gt;\n" + body + "&lt;/" + type + "&gt;\n";
    }
    listitem(text, task, checked) {
      return `&lt;li&gt;${text}&lt;/li&gt;
`;
    }
    checkbox(checked) {
      return "&lt;input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"&gt;';
    }
    paragraph(text) {
      return `&lt;p&gt;${text}&lt;/p&gt;
`;
    }
    table(header, body) {
      if (body)
        body = `&lt;tbody&gt;${body}&lt;/tbody&gt;`;
      return "&lt;table&gt;\n&lt;thead&gt;\n" + header + "&lt;/thead&gt;\n" + body + "&lt;/table&gt;\n";
    }
    tablerow(content) {
      return `&lt;tr&gt;
${content}&lt;/tr&gt;
`;
    }
    tablecell(content, flags) {
      const type = flags.header ? "th" : "td";
      const tag2 = flags.align ? `&lt;${type} align="${flags.align}"&gt;` : `&lt;${type}&gt;`;
      return tag2 + content + `&lt;/${type}&gt;
`;
    }
    /**
     * span level renderer
     */
    strong(text) {
      return `&lt;strong&gt;${text}&lt;/strong&gt;`;
    }
    em(text) {
      return `&lt;em&gt;${text}&lt;/em&gt;`;
    }
    codespan(text) {
      return `&lt;code&gt;${text}&lt;/code&gt;`;
    }
    br() {
      return "&lt;br&gt;";
    }
    del(text) {
      return `&lt;del&gt;${text}&lt;/del&gt;`;
    }
    link(href, title, text) {
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return text;
      }
      href = cleanHref;
      let out = '&lt;a href="' + href + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += "&gt;" + text + "&lt;/a&gt;";
      return out;
    }
    image(href, title, text) {
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return text;
      }
      href = cleanHref;
      let out = `&lt;img src="${href}" alt="${text}"`;
      if (title) {
        out += ` title="${title}"`;
      }
      out += "&gt;";
      return out;
    }
    text(text) {
      return text;
    }
  };
  var _TextRenderer = class {
    // no need for block level renderers
    strong(text) {
      return text;
    }
    em(text) {
      return text;
    }
    codespan(text) {
      return text;
    }
    del(text) {
      return text;
    }
    html(text) {
      return text;
    }
    text(text) {
      return text;
    }
    link(href, title, text) {
      return "" + text;
    }
    image(href, title, text) {
      return "" + text;
    }
    br() {
      return "";
    }
  };
  var _Parser = class __Parser {
    options;
    renderer;
    textRenderer;
    constructor(options2) {
      this.options = options2 || _defaults;
      this.options.renderer = this.options.renderer || new _Renderer();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.textRenderer = new _TextRenderer();
    }
    /**
     * Static Parse Method
     */
    static parse(tokens, options2) {
      const parser2 = new __Parser(options2);
      return parser2.parse(tokens);
    }
    /**
     * Static Parse Inline Method
     */
    static parseInline(tokens, options2) {
      const parser2 = new __Parser(options2);
      return parser2.parseInline(tokens);
    }
    /**
     * Parse Loop
     */
    parse(tokens, top = true) {
      let out = "";
      for (let i = 0; i &lt; tokens.length; i++) {
        const token = tokens[i];
        if (this.options.extensions &amp;&amp; this.options.extensions.renderers &amp;&amp; this.options.extensions.renderers[token.type]) {
          const genericToken = token;
          const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "space": {
            continue;
          }
          case "hr": {
            out += this.renderer.hr();
            continue;
          }
          case "heading": {
            const headingToken = token;
            out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));
            continue;
          }
          case "code": {
            const codeToken = token;
            out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);
            continue;
          }
          case "table": {
            const tableToken = token;
            let header = "";
            let cell = "";
            for (let j = 0; j &lt; tableToken.header.length; j++) {
              cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });
            }
            header += this.renderer.tablerow(cell);
            let body = "";
            for (let j = 0; j &lt; tableToken.rows.length; j++) {
              const row = tableToken.rows[j];
              cell = "";
              for (let k = 0; k &lt; row.length; k++) {
                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });
              }
              body += this.renderer.tablerow(cell);
            }
            out += this.renderer.table(header, body);
            continue;
          }
          case "blockquote": {
            const blockquoteToken = token;
            const body = this.parse(blockquoteToken.tokens);
            out += this.renderer.blockquote(body);
            continue;
          }
          case "list": {
            const listToken = token;
            const ordered = listToken.ordered;
            const start = listToken.start;
            const loose = listToken.loose;
            let body = "";
            for (let j = 0; j &lt; listToken.items.length; j++) {
              const item = listToken.items[j];
              const checked = item.checked;
              const task = item.task;
              let itemBody = "";
              if (item.task) {
                const checkbox = this.renderer.checkbox(!!checked);
                if (loose) {
                  if (item.tokens.length &gt; 0 &amp;&amp; item.tokens[0].type === "paragraph") {
                    item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                    if (item.tokens[0].tokens &amp;&amp; item.tokens[0].tokens.length &gt; 0 &amp;&amp; item.tokens[0].tokens[0].type === "text") {
                      item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: "text",
                      text: checkbox + " "
                    });
                  }
                } else {
                  itemBody += checkbox + " ";
                }
              }
              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, !!checked);
            }
            out += this.renderer.list(body, ordered, start);
            continue;
          }
          case "html": {
            const htmlToken = token;
            out += this.renderer.html(htmlToken.text, htmlToken.block);
            continue;
          }
          case "paragraph": {
            const paragraphToken = token;
            out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));
            continue;
          }
          case "text": {
            let textToken = token;
            let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;
            while (i + 1 &lt; tokens.length &amp;&amp; tokens[i + 1].type === "text") {
              textToken = tokens[++i];
              body += "\n" + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);
            }
            out += top ? this.renderer.paragraph(body) : body;
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    /**
     * Parse Inline Tokens
     */
    parseInline(tokens, renderer) {
      renderer = renderer || this.renderer;
      let out = "";
      for (let i = 0; i &lt; tokens.length; i++) {
        const token = tokens[i];
        if (this.options.extensions &amp;&amp; this.options.extensions.renderers &amp;&amp; this.options.extensions.renderers[token.type]) {
          const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "escape": {
            const escapeToken = token;
            out += renderer.text(escapeToken.text);
            break;
          }
          case "html": {
            const tagToken = token;
            out += renderer.html(tagToken.text);
            break;
          }
          case "link": {
            const linkToken = token;
            out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));
            break;
          }
          case "image": {
            const imageToken = token;
            out += renderer.image(imageToken.href, imageToken.title, imageToken.text);
            break;
          }
          case "strong": {
            const strongToken = token;
            out += renderer.strong(this.parseInline(strongToken.tokens, renderer));
            break;
          }
          case "em": {
            const emToken = token;
            out += renderer.em(this.parseInline(emToken.tokens, renderer));
            break;
          }
          case "codespan": {
            const codespanToken = token;
            out += renderer.codespan(codespanToken.text);
            break;
          }
          case "br": {
            out += renderer.br();
            break;
          }
          case "del": {
            const delToken = token;
            out += renderer.del(this.parseInline(delToken.tokens, renderer));
            break;
          }
          case "text": {
            const textToken = token;
            out += renderer.text(textToken.text);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  };
  var _Hooks = class {
    options;
    constructor(options2) {
      this.options = options2 || _defaults;
    }
    static passThroughHooks = /* @__PURE__ */ new Set([
      "preprocess",
      "postprocess",
      "processAllTokens"
    ]);
    /**
     * Process markdown before marked
     */
    preprocess(markdown) {
      return markdown;
    }
    /**
     * Process HTML after marked is finished
     */
    postprocess(html2) {
      return html2;
    }
    /**
     * Process all tokens before walk tokens
     */
    processAllTokens(tokens) {
      return tokens;
    }
  };
  var Marked = class {
    defaults = _getDefaults();
    options = this.setOptions;
    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);
    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);
    Parser = _Parser;
    Renderer = _Renderer;
    TextRenderer = _TextRenderer;
    Lexer = _Lexer;
    Tokenizer = _Tokenizer;
    Hooks = _Hooks;
    constructor(...args) {
      this.use(...args);
    }
    /**
     * Run callback for every token
     */
    walkTokens(tokens, callback) {
      let values = [];
      for (const token of tokens) {
        values = values.concat(callback.call(this, token));
        switch (token.type) {
          case "table": {
            const tableToken = token;
            for (const cell of tableToken.header) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
            for (const row of tableToken.rows) {
              for (const cell of row) {
                values = values.concat(this.walkTokens(cell.tokens, callback));
              }
            }
            break;
          }
          case "list": {
            const listToken = token;
            values = values.concat(this.walkTokens(listToken.items, callback));
            break;
          }
          default: {
            const genericToken = token;
            if (this.defaults.extensions?.childTokens?.[genericToken.type]) {
              this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) =&gt; {
                const tokens2 = genericToken[childTokens].flat(Infinity);
                values = values.concat(this.walkTokens(tokens2, callback));
              });
            } else if (genericToken.tokens) {
              values = values.concat(this.walkTokens(genericToken.tokens, callback));
            }
          }
        }
      }
      return values;
    }
    use(...args) {
      const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
      args.forEach((pack) =&gt; {
        const opts = { ...pack };
        opts.async = this.defaults.async || opts.async || false;
        if (pack.extensions) {
          pack.extensions.forEach((ext) =&gt; {
            if (!ext.name) {
              throw new Error("extension name required");
            }
            if ("renderer" in ext) {
              const prevRenderer = extensions.renderers[ext.name];
              if (prevRenderer) {
                extensions.renderers[ext.name] = function(...args2) {
                  let ret = ext.renderer.apply(this, args2);
                  if (ret === false) {
                    ret = prevRenderer.apply(this, args2);
                  }
                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }
            if ("tokenizer" in ext) {
              if (!ext.level || ext.level !== "block" &amp;&amp; ext.level !== "inline") {
                throw new Error("extension level must be 'block' or 'inline'");
              }
              const extLevel = extensions[ext.level];
              if (extLevel) {
                extLevel.unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }
              if (ext.start) {
                if (ext.level === "block") {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === "inline") {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }
            if ("childTokens" in ext &amp;&amp; ext.childTokens) {
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
          opts.extensions = extensions;
        }
        if (pack.renderer) {
          const renderer = this.defaults.renderer || new _Renderer(this.defaults);
          for (const prop in pack.renderer) {
            if (!(prop in renderer)) {
              throw new Error(`renderer '${prop}' does not exist`);
            }
            if (prop === "options") {
              continue;
            }
            const rendererProp = prop;
            const rendererFunc = pack.renderer[rendererProp];
            const prevRenderer = renderer[rendererProp];
            renderer[rendererProp] = (...args2) =&gt; {
              let ret = rendererFunc.apply(renderer, args2);
              if (ret === false) {
                ret = prevRenderer.apply(renderer, args2);
              }
              return ret || "";
            };
          }
          opts.renderer = renderer;
        }
        if (pack.tokenizer) {
          const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
          for (const prop in pack.tokenizer) {
            if (!(prop in tokenizer)) {
              throw new Error(`tokenizer '${prop}' does not exist`);
            }
            if (["options", "rules", "lexer"].includes(prop)) {
              continue;
            }
            const tokenizerProp = prop;
            const tokenizerFunc = pack.tokenizer[tokenizerProp];
            const prevTokenizer = tokenizer[tokenizerProp];
            tokenizer[tokenizerProp] = (...args2) =&gt; {
              let ret = tokenizerFunc.apply(tokenizer, args2);
              if (ret === false) {
                ret = prevTokenizer.apply(tokenizer, args2);
              }
              return ret;
            };
          }
          opts.tokenizer = tokenizer;
        }
        if (pack.hooks) {
          const hooks = this.defaults.hooks || new _Hooks();
          for (const prop in pack.hooks) {
            if (!(prop in hooks)) {
              throw new Error(`hook '${prop}' does not exist`);
            }
            if (prop === "options") {
              continue;
            }
            const hooksProp = prop;
            const hooksFunc = pack.hooks[hooksProp];
            const prevHook = hooks[hooksProp];
            if (_Hooks.passThroughHooks.has(prop)) {
              hooks[hooksProp] = (arg) =&gt; {
                if (this.defaults.async) {
                  return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) =&gt; {
                    return prevHook.call(hooks, ret2);
                  });
                }
                const ret = hooksFunc.call(hooks, arg);
                return prevHook.call(hooks, ret);
              };
            } else {
              hooks[hooksProp] = (...args2) =&gt; {
                let ret = hooksFunc.apply(hooks, args2);
                if (ret === false) {
                  ret = prevHook.apply(hooks, args2);
                }
                return ret;
              };
            }
          }
          opts.hooks = hooks;
        }
        if (pack.walkTokens) {
          const walkTokens2 = this.defaults.walkTokens;
          const packWalktokens = pack.walkTokens;
          opts.walkTokens = function(token) {
            let values = [];
            values.push(packWalktokens.call(this, token));
            if (walkTokens2) {
              values = values.concat(walkTokens2.call(this, token));
            }
            return values;
          };
        }
        this.defaults = { ...this.defaults, ...opts };
      });
      return this;
    }
    setOptions(opt) {
      this.defaults = { ...this.defaults, ...opt };
      return this;
    }
    lexer(src, options2) {
      return _Lexer.lex(src, options2 ?? this.defaults);
    }
    parser(tokens, options2) {
      return _Parser.parse(tokens, options2 ?? this.defaults);
    }
    #parseMarkdown(lexer2, parser2) {
      return (src, options2) =&gt; {
        const origOpt = { ...options2 };
        const opt = { ...this.defaults, ...origOpt };
        if (this.defaults.async === true &amp;&amp; origOpt.async === false) {
          if (!opt.silent) {
            console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.");
          }
          opt.async = true;
        }
        const throwError = this.#onError(!!opt.silent, !!opt.async);
        if (typeof src === "undefined" || src === null) {
          return throwError(new Error("marked(): input parameter is undefined or null"));
        }
        if (typeof src !== "string") {
          return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
        }
        if (opt.hooks) {
          opt.hooks.options = opt;
        }
        if (opt.async) {
          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) =&gt; lexer2(src2, opt)).then((tokens) =&gt; opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens) =&gt; opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() =&gt; tokens) : tokens).then((tokens) =&gt; parser2(tokens, opt)).then((html2) =&gt; opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);
        }
        try {
          if (opt.hooks) {
            src = opt.hooks.preprocess(src);
          }
          let tokens = lexer2(src, opt);
          if (opt.hooks) {
            tokens = opt.hooks.processAllTokens(tokens);
          }
          if (opt.walkTokens) {
            this.walkTokens(tokens, opt.walkTokens);
          }
          let html2 = parser2(tokens, opt);
          if (opt.hooks) {
            html2 = opt.hooks.postprocess(html2);
          }
          return html2;
        } catch (e) {
          return throwError(e);
        }
      };
    }
    #onError(silent, async) {
      return (e) =&gt; {
        e.message += "\nPlease report this to https://github.com/markedjs/marked.";
        if (silent) {
          const msg = "&lt;p&gt;An error occurred:&lt;/p&gt;&lt;pre&gt;" + escape$1(e.message + "", true) + "&lt;/pre&gt;";
          if (async) {
            return Promise.resolve(msg);
          }
          return msg;
        }
        if (async) {
          return Promise.reject(e);
        }
        throw e;
      };
    }
  };
  var markedInstance = new Marked();
  function marked(src, opt) {
    return markedInstance.parse(src, opt);
  }
  marked.options = marked.setOptions = function(options2) {
    markedInstance.setOptions(options2);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = _getDefaults;
  marked.defaults = _defaults;
  marked.use = function(...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.walkTokens = function(tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
  };
  marked.parseInline = markedInstance.parseInline;
  marked.Parser = _Parser;
  marked.parser = _Parser.parse;
  marked.Renderer = _Renderer;
  marked.TextRenderer = _TextRenderer;
  marked.Lexer = _Lexer;
  marked.lexer = _Lexer.lex;
  marked.Tokenizer = _Tokenizer;
  marked.Hooks = _Hooks;
  marked.parse = marked;
  var options = marked.options;
  var setOptions = marked.setOptions;
  var use = marked.use;
  var walkTokens = marked.walkTokens;
  var parseInline = marked.parseInline;
  var parser = _Parser.parse;
  var lexer = _Lexer.lex;

  // ts/xmlNamespaces.ts
  function ns(name) {
    return {
      svg: "http://www.w3.org/2000/svg",
      xhtml: "http://www.w3.org/1999/xhtml",
      xlink: "http://www.w3.org/1999/xlink",
      inkscape: "http://www.inkscape.org/namespaces/inkscape",
      sodipodi: "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
      slidie: "http://xmlns.jhnet.co.uk/slidie/1.0"
    }[name];
  }

  // ts/eventFilters.ts
  function eventInvolvesHyperlinkOrButton(evt) {
    for (const elem of evt.composedPath()) {
      if ((elem.namespaceURI == ns("xhtml") || elem.namespaceURI == ns("svg")) &amp;&amp; elem.localName == "a" || elem.namespaceURI == ns("xhtml") &amp;&amp; elem.localName == "button") {
        return true;
      }
    }
    return false;
  }
  function eventInvolvesInput(evt) {
    for (const elem of evt.composedPath()) {
      if (elem.namespaceURI == ns("xhtml") &amp;&amp; elem.localName == "input") {
        return true;
      }
    }
    return false;
  }
  function keyboardEventInterferesWithElement(evt) {
    if (eventInvolvesInput(evt)) {
      return true;
    }
    switch (evt.key) {
      case "Enter":
      case "Space":
        return eventInvolvesHyperlinkOrButton(evt);
      default:
        return false;
    }
  }

  // ts/foreignObjectScaling.ts
  function getSvgStaticCTM(elem) {
    const parents = [elem];
    while (parents[0].parentElement) {
      parents.splice(
        0,
        0,
        parents[0].parentElement
      );
    }
    parents.splice(0, 1);
    const ctm = new DOMMatrix();
    for (const elem2 of parents) {
      for (const transform of elem2.transform.baseVal) {
        ctm.multiplySelf(transform.matrix);
      }
    }
    return ctm;
  }
  function getSvgUserUnitSize(svg) {
    if (svg.viewBox.baseVal === null) {
      return [1, 1];
    }
    const svgWidth = svg.width.baseVal.value;
    const svgHeight = svg.height.baseVal.value;
    const svgVBWidth = svg.viewBox.baseVal.width;
    const svgVBHeight = svg.viewBox.baseVal.height;
    const hScale = svgWidth / svgVBWidth;
    const vScale = svgHeight / svgVBHeight;
    const par = svg.preserveAspectRatio.baseVal;
    if (par.align === SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE) {
      return [hScale, vScale];
    } else {
      const viewBoxWiderThanSVG = svgVBWidth / svgVBHeight &gt; svgWidth / svgHeight;
      const meet = par.meetOrSlice === SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET;
      if (meet == viewBoxWiderThanSVG) {
        return [hScale, hScale];
      } else {
        return [vScale, vScale];
      }
    }
  }
  function getForeignObjectSizePx(elem) {
    const ctm = getSvgStaticCTM(elem);
    const [sx, sy] = getSvgUserUnitSize(elem.ownerSVGElement);
    ctm.scaleSelf(sx, sy);
    const topLeft = ctm.transformPoint(
      new DOMPoint(elem.x.baseVal.value, elem.y.baseVal.value)
    );
    const topRight = ctm.transformPoint(
      new DOMPoint(
        elem.x.baseVal.value + elem.width.baseVal.value,
        elem.y.baseVal.value
      )
    );
    const bottomLeft = ctm.transformPoint(
      new DOMPoint(
        elem.x.baseVal.value,
        elem.y.baseVal.value + elem.height.baseVal.value
      )
    );
    const dxW = topRight.x - topLeft.x;
    const dyW = topRight.y - topLeft.y;
    const width = Math.sqrt(dxW * dxW + dyW * dyW);
    const dxH = bottomLeft.x - topLeft.x;
    const dyH = bottomLeft.y - topLeft.y;
    const height = Math.sqrt(dxH * dxH + dyH * dyH);
    return [width, height];
  }
  function scaleForeignObjectContents(foreignObject, scale = 1) {
    const [widthPx, heightPx] = getForeignObjectSizePx(foreignObject);
    const width = widthPx / scale;
    const height = heightPx / scale;
    const widthOrig = parseFloat(foreignObject.getAttribute("width"));
    const heightOrig = parseFloat(foreignObject.getAttribute("height"));
    foreignObject.setAttribute("width", width.toString());
    foreignObject.setAttribute("height", height.toString());
    const sx = widthOrig / width;
    const sy = heightOrig / height;
    const x = parseFloat(foreignObject.getAttribute("x") || "0");
    const y = parseFloat(foreignObject.getAttribute("y") || "0");
    foreignObject.removeAttribute("x");
    foreignObject.removeAttribute("y");
    const existingTransform = foreignObject.getAttribute("transform") || "";
    foreignObject.setAttribute(
      "transform",
      `${existingTransform} translate(${x}, ${y}) scale(${sx}, ${sy})`
    );
  }
  function setupForeignObjectScaling(svg) {
    for (const foreignObject of svg.getElementsByTagNameNS(
      ns("svg"),
      "foreignObject"
    )) {
      if (foreignObject.hasAttributeNS(ns("slidie"), "scale")) {
        const scale = parseFloat(
          foreignObject.getAttributeNS(ns("slidie"), "scale")
        );
        scaleForeignObjectContents(foreignObject, scale);
      }
    }
  }

  // ts/keyboard.ts
  function matchKeypress(evt, shortcuts) {
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return null;
    }
    for (const entry of shortcuts) {
      for (const key of entry.keys) {
        if (key.match(/^[a-zA-Z]$/) !== null) {
          if (key.toLowerCase() == evt.key.toLowerCase()) {
            return entry;
          }
        } else if (key == evt.key) {
          return entry;
        }
      }
    }
    return null;
  }

  // ts/stopwatch.ts
  function formatDuration(milliseconds) {
    let seconds = Math.floor(milliseconds / 1e3);
    const hours = Math.floor(seconds / (60 * 60));
    seconds -= hours * 60 * 60;
    const minutes = Math.floor(seconds / 60);
    seconds -= minutes * 60;
    const hh = hours.toString();
    const mm = minutes.toString().padStart(2, "0");
    const ss = seconds.toString().padStart(2, "0");
    if (hours &gt; 0) {
      return `${hh}:${mm}:${ss}`;
    } else {
      return `${minutes}:${ss}`;
    }
  }
  var Stopwatch = class {
    constructor(timerRunning = false) {
      this.timerStart = Date.now();
      this.timerEnd = this.timerStart;
      this.timerRunning = timerRunning;
    }
    get running() {
      return this.timerRunning;
    }
    /** Pause the timer. */
    pause() {
      if (this.timerRunning) {
        this.timerEnd = Date.now();
        this.timerRunning = false;
      }
    }
    /** Resume the timer. */
    resume() {
      if (!this.timerRunning) {
        const now = Date.now();
        this.timerStart += now - this.timerEnd;
        this.timerEnd = now;
        this.timerRunning = true;
      }
    }
    /** Toggle the pause state. Returns 'true' iff now running. */
    togglePause() {
      if (this.timerRunning) {
        this.pause();
      } else {
        this.resume();
      }
      return this.timerRunning;
    }
    /** Reset the timer */
    reset() {
      this.timerStart = Date.now();
      this.timerEnd = this.timerStart;
    }
    /** Return the number of milliseconds on the timer. */
    read() {
      if (this.timerRunning) {
        this.timerEnd = Date.now();
      }
      return this.timerEnd - this.timerStart;
    }
  };

  // ts/buildSteps.ts
  function findBuildSteps(svgRoot) {
    const out = [];
    for (const elem of svgRoot.querySelectorAll("*")) {
      if (elem.namespaceURI == ns("svg") &amp;&amp; elem.hasAttributeNS(ns("slidie"), "steps")) {
        const stepNumbers = JSON.parse(
          elem.getAttributeNS(ns("slidie"), "steps")
        );
        const tags = JSON.parse(
          elem.getAttributeNS(ns("slidie"), "tags") || "[]"
        );
        out.push({
          elem,
          stepNumbers,
          tags,
          steps: []
          // Placeholder, populated below
        });
      }
    }
    const firstStepNumber = Math.min(
      ...out.map(({ stepNumbers }) =&gt; stepNumbers).flat().concat([0])
    );
    for (const obj of out) {
      obj.steps = obj.stepNumbers.map((n) =&gt; n - firstStepNumber);
    }
    return out;
  }
  function layerStepNumbers(layerSteps) {
    const allSteps = layerSteps.map(({ stepNumbers }) =&gt; stepNumbers).flat().concat([0]);
    const first = Math.min(...allSteps);
    const last = Math.max(...allSteps);
    const out = [];
    for (let i = first; i &lt;= last; i++) {
      out.push(i);
    }
    return out;
  }
  function layerStepTags(layerSteps) {
    const map = /* @__PURE__ */ new Map();
    for (const { steps, tags } of layerSteps) {
      for (const tag2 of tags) {
        if (!map.has(tag2)) {
          map.set(tag2, []);
        }
        for (const step of steps) {
          if (map.get(tag2).indexOf(step) == -1) {
            map.get(tag2).push(step);
          }
        }
        map.get(tag2).sort();
      }
    }
    return map;
  }

  // ts/urlHashes.ts
  function toUrlHash(slide, step = 0) {
    if (step == 0) {
      return `#${slide + 1}`;
    } else {
      return `#${slide + 1}#${step + 1}`;
    }
  }
  var LINK_REGEX = new RegExp(
    "^#(?:(?&lt;slideIndex&gt;[0-9]+)|(?&lt;slideId&gt;[^0-9#@&lt;][^#@&lt;]*))?(?:(?:#(?&lt;stepIndex&gt;[0-9]+))|(?:&lt;(?&lt;stepNumber&gt;[-+]?[0-9]+)&gt;)|(?:@(?&lt;stepTag&gt;[^\\s&lt;&gt;.@]+)))?$"
  );
  function parseUrlHash(hash, currentSlide, slideIds, slideStepNumbers, slideTags) {
    const match = LINK_REGEX.exec(hash);
    if (match === null) {
      return null;
    }
    const groups = match.groups;
    let slide = currentSlide;
    if (groups.slideIndex !== void 0) {
      slide = parseInt(groups.slideIndex) - 1;
    } else if (groups.slideId !== void 0) {
      const slideId = groups.slideId;
      if (slideIds.has(slideId)) {
        slide = slideIds.get(slideId);
      } else {
        return null;
      }
    }
    if (slide &lt; 0 || slide &gt;= slideStepNumbers.length) {
      return null;
    }
    let step = 0;
    if (groups.stepIndex !== void 0) {
      step = parseInt(groups.stepIndex) - 1;
    } else if (groups.stepNumber !== void 0) {
      step = slideStepNumbers[slide].indexOf(parseInt(groups.stepNumber));
      if (step &lt; 0) {
        step = 0;
      }
    } else if (groups.stepTag !== void 0) {
      const tag2 = groups.stepTag;
      if (slideTags[slide].has(tag2)) {
        step = slideTags[slide].get(tag2)[0];
      }
    }
    return [slide, step];
  }
  function enumerateAbsoluteHashes(slides) {
    const out = [];
    for (const [slideNum, slide] of slides.entries()) {
      const slideValues = [`#${slideNum + 1}`];
      if (slide.hasAttributeNS(ns("slidie"), "id")) {
        slideValues.push(`#${slide.getAttributeNS(ns("slidie"), "id")}`);
      }
      const stepValues = [];
      const layerSteps = findBuildSteps(slide);
      for (const [step, stepNumber] of layerStepNumbers(layerSteps).entries()) {
        stepValues.push(`#${step + 1}`);
        stepValues.push(`&lt;${stepNumber}&gt;`);
      }
      for (const tag2 of layerStepTags(layerSteps).keys()) {
        stepValues.push(`@${tag2}`);
      }
      for (const slideValue of slideValues) {
        out.push(`${slideValue}`);
        for (const stepValue of stepValues) {
          out.push(`${slideValue}${stepValue}`);
        }
      }
    }
    return out;
  }

  // ts/presenterView.ts
  function openOrFocusWindow(url, target, windowFeatures = "") {
    const existingWindows = openOrFocusWindow.existingWindows || /* @__PURE__ */ new Map();
    openOrFocusWindow.existingWindows = existingWindows;
    const existingWindow = existingWindows.get(target);
    if (existingWindow &amp;&amp; !existingWindow.closed) {
      existingWindow.focus();
      return [existingWindow, false];
    }
    const wnd = window.open(url, target, windowFeatures);
    existingWindows.set(target, wnd);
    return [wnd, true];
  }
  function connectStepperToPresenterViewSlideNumber(stepper, slides, presenterViewDocument) {
    const slideCount = presenterViewDocument.querySelector(
      "#slide-count"
    );
    const slideNumber = presenterViewDocument.querySelector(
      "#slide-number"
    );
    slideCount.innerText = slides.svgs.length.toString();
    function showSlideNumber(state) {
      slideNumber.innerText = toUrlHash(state.slide, state.step).slice(1);
    }
    stepper.onChange(showSlideNumber);
    showSlideNumber(stepper.state);
  }
  function connectStepperToPresenterViewThumbnails(stepper, slides, presenterViewDocument) {
    const flatThumbnails = Array.from(
      document.querySelectorAll("#thumbnails .thumbnail img")
    );
    const thumbnails = slides.buildStepNumbers.map(
      (stepNumbers) =&gt; stepNumbers.map(() =&gt; ({
        now: flatThumbnails.shift(),
        next: flatThumbnails[0] || null
      }))
    );
    const nowImage = presenterViewDocument.getElementById(
      "thumbnail-now"
    );
    const nextImage = presenterViewDocument.getElementById(
      "thumbnail-next"
    );
    function showNowNextThumbnails(state) {
      const { now, next } = thumbnails[state.slide][state.step];
      nowImage.src = now.src;
      if (next !== null) {
        nextImage.src = next.src;
      } else {
        nextImage.src = "";
      }
    }
    stepper.onChange(showNowNextThumbnails);
    showNowNextThumbnails(stepper.state);
  }
  function connectStopwatchToPresenterView(stopwatch, presenterViewDocument) {
    const clockElem = presenterViewDocument.getElementById("clock");
    const timerElem = presenterViewDocument.getElementById("timer");
    const pauseButton = presenterViewDocument.getElementById("timer-pause");
    const resetButton = presenterViewDocument.getElementById("timer-reset");
    function updateTimers() {
      clockElem.innerText = (/* @__PURE__ */ new Date()).toLocaleTimeString();
      timerElem.innerText = formatDuration(stopwatch.read());
      if (stopwatch.running) {
        pauseButton.innerText = "Pause";
        pauseButton.classList.add("pause");
        pauseButton.classList.remove("resume");
      } else {
        if (stopwatch.read() == 0) {
          pauseButton.innerText = "Start";
        } else {
          pauseButton.innerText = "Resume";
        }
        pauseButton.classList.add("resume");
        pauseButton.classList.remove("pause");
      }
    }
    window.setInterval(updateTimers, 1e3);
    updateTimers();
    pauseButton.addEventListener("click", (evt) =&gt; {
      stopwatch.togglePause();
      updateTimers();
      evt.stopPropagation();
    });
    resetButton.addEventListener("click", (evt) =&gt; {
      stopwatch.reset();
      updateTimers();
      evt.stopPropagation();
    });
  }
  var PRESENTER_VIEW_KEYBOARD_SHORTCUTS = [
    {
      description: "Show help",
      keys: ["F1", "?"],
      action: (helpDialog) =&gt; toggleDialog(helpDialog)
    }
  ];
  function cloneEvent(evt) {
    return new evt.constructor(evt.type, evt);
  }
  function setupPresenterViewKeyboardShortcuts(presenterViewWindow, helpDialog) {
    presenterViewWindow.addEventListener("keydown", (evt) =&gt; {
      if (keyboardEventInterferesWithElement(evt)) {
        return;
      }
      const match = matchKeypress(evt, PRESENTER_VIEW_KEYBOARD_SHORTCUTS);
      if (match !== null) {
        match.action(helpDialog);
        evt.preventDefault();
        evt.stopPropagation();
      } else {
        window.dispatchEvent(cloneEvent(evt));
      }
    });
  }
  function showPresenterView(stepper, slides, stopwatch) {
    const [wnd, newlyOpened] = openOrFocusWindow(
      "",
      "presenter-view",
      "popup=true"
    );
    if (!newlyOpened) {
      return;
    }
    window.addEventListener("pagehide", () =&gt; wnd.close());
    const presenterViewTemplaate = document.getElementById(
      "presenter-view-template"
    );
    const root = presenterViewTemplaate.content.cloneNode(true).firstElementChild;
    wnd.document.removeChild(wnd.document.firstElementChild);
    wnd.document.appendChild(root);
    const helpDialog = document.getElementById("help").cloneNode(true);
    helpDialog.close();
    wnd.document.body.appendChild(helpDialog);
    connectStepperToPresenterViewSlideNumber(stepper, slides, wnd.document);
    connectStepperToSpeakerNotes(
      stepper,
      slides,
      wnd.document.getElementById("notes")
    );
    connectStepperToPresenterViewThumbnails(stepper, slides, wnd.document);
    connectStopwatchToPresenterView(stopwatch, wnd.document);
    setupMouseClicks(stepper, wnd);
    setupPresenterViewKeyboardShortcuts(wnd, helpDialog);
  }

  // ts/resizeOnBorderDrag.ts
  function resizeOnBorderDrag(elem) {
    elem.addEventListener("mousemove", (evt) =&gt; {
      if (evt.offsetX - elem.clientWidth &gt;= 0) {
        elem.style.cursor = "ew-resize";
      } else if (evt.offsetY &lt; 0) {
        elem.style.cursor = "ns-resize";
      } else {
        elem.style.cursor = "auto";
      }
    });
    elem.addEventListener("mousedown", (evt) =&gt; {
      const style = getComputedStyle(elem);
      let adjust;
      let scale;
      if (style.borderRightStyle == "solid") {
        if (evt.offsetX - elem.clientWidth &lt; 0) {
          return;
        }
        adjust = "width";
        scale = 1;
      } else if (style.borderTopStyle == "solid") {
        if (evt.offsetY &gt;= 0) {
          return;
        }
        adjust = "height";
        scale = -1;
      } else {
        console.warn("Not implemented: Adjusting bottom/left edges!");
      }
      evt.preventDefault();
      evt.stopPropagation();
      let lastX = evt.clientX;
      let lastY = evt.clientY;
      let width = elem.offsetWidth;
      let height = elem.offsetHeight;
      function onMouseMove(evt2) {
        const deltaX = evt2.clientX - lastX;
        const deltaY = evt2.clientY - lastY;
        lastX = evt2.clientX;
        lastY = evt2.clientY;
        if (adjust == "width") {
          width += deltaX * scale;
          elem.style.width = `${width}px`;
        } else if (adjust == "height") {
          height += deltaY * scale;
          elem.style.height = `${height}px`;
        }
        evt2.preventDefault();
        evt2.stopPropagation();
      }
      function onMouseUp(evt2) {
        window.removeEventListener("mousemove", onMouseMove);
        window.removeEventListener("mouseup", onMouseMove);
        window.removeEventListener("mouseup", onMouseUp);
        evt2.preventDefault();
        evt2.stopPropagation();
      }
      window.addEventListener("mousemove", onMouseMove);
      window.addEventListener("mouseup", onMouseMove);
      window.addEventListener("mouseup", onMouseUp);
    });
  }

  // ts/setClassWhileMouseIdle.ts
  function setClassWhileMouseIdle(elem, className = "mouse-idle", timeout = 2e3) {
    let timeoutId = null;
    elem.addEventListener("mousemove", () =&gt; {
      elem.classList.remove(className);
      if (timeoutId !== null) {
        clearTimeout(timeoutId);
      }
      timeoutId = setTimeout(() =&gt; {
        elem.classList.add(className);
        timeoutId = null;
      }, timeout);
    });
  }

  // ts/slideChangeEvents.ts
  var SlideChangeEvent = class extends Event {
    constructor(type, state, slides) {
      super(type, {
        // Don't bubble out of the SVG's shadow DOM
        composed: false,
        // The change has already occurred by the time this event is fired
        cancelable: false,
        // Allow bubbling up to the window of the shadow DOM
        bubbles: true
      });
      this.slide = state.slide;
      this.step = state.step;
      this.stepNumber = slides.buildStepNumbers[state.slide][state.step];
      this.tags = [];
      for (const [tag2, steps] of slides.buildStepTags[state.slide].entries()) {
        if (steps.indexOf(state.step) &gt;= 0) {
          this.tags.push(tag2);
        }
      }
    }
  };
  function connectStepperToSlideEvents(stepper, slides) {
    function dispatchEvents(state, lastState) {
      const svg = slides.svgs[state.slide];
      if (lastState === null || state.slide != lastState.slide) {
        svg.dispatchEvent(new SlideChangeEvent("slideenter", state, slides));
        if (lastState !== null) {
          const lastSvg = slides.svgs[lastState.slide];
          lastSvg.dispatchEvent(
            new SlideChangeEvent("slideleave", state, slides)
          );
        }
      }
      if (lastState !== null &amp;&amp; state.slide == lastState.slide &amp;&amp; state.step != lastState.step) {
        svg.dispatchEvent(new SlideChangeEvent("stepchange", state, slides));
      }
      if (lastState !== null) {
        if (state.blanked &amp;&amp; !lastState.blanked) {
          svg.dispatchEvent(new SlideChangeEvent("slideblank", state, slides));
        }
        if (!state.blanked &amp;&amp; lastState.blanked) {
          const lastSvg = slides.svgs[lastState.slide];
          lastSvg.dispatchEvent(
            new SlideChangeEvent("slideunblank", state, slides)
          );
        }
      }
    }
    dispatchEvents(stepper.state, null);
    stepper.onChange(dispatchEvents);
  }

  // ts/slideLookups.ts
  function getSlideId(svg) {
    if (svg.hasAttributeNS(ns("slidie"), "id")) {
      return svg.getAttributeNS(ns("slidie"), "id");
    } else {
      return null;
    }
  }
  function makeIdToSlideLookup(slides) {
    return new Map(
      slides.map((svg, slide) =&gt; [getSlideId(svg), slide]).filter(([id]) =&gt; id !== null)
    );
  }
  var SlideLookups = class {
    /**
     * Takes the SVGs (one per slide) and their corresponding container elements,
     * e.g. as produced by loadSlidesIntoContainers.
     */
    constructor(svgs, containers) {
      this.svgs = svgs;
      this.containers = containers;
      this.buildSteps = this.svgs.map((slide) =&gt; findBuildSteps(slide));
      this.buildStepTags = this.buildSteps.map(
        (buildSteps) =&gt; layerStepTags(buildSteps)
      );
      this.buildStepNumbers = this.buildSteps.map(
        (buildSteps) =&gt; layerStepNumbers(buildSteps)
      );
      this.buildStepCounts = this.buildStepNumbers.map(
        (numbers) =&gt; numbers.length
      );
      this.ids = makeIdToSlideLookup(this.svgs);
    }
  };

  // ts/speakerNotes.ts
  function getSpeakerNotes(svgRoot) {
    const out = [];
    for (const parentElem of svgRoot.getElementsByTagNameNS(
      ns("slidie"),
      "notes"
    )) {
      for (const elem of parentElem.getElementsByTagNameNS(
        ns("slidie"),
        "note"
      )) {
        let stepNumbers = null;
        if (elem.hasAttribute("steps")) {
          stepNumbers = JSON.parse(elem.getAttribute("steps"));
        }
        const text = elem.innerHTML;
        out.push({ stepNumbers, text });
      }
    }
    return out;
  }

  // ts/stepper.ts
  var Stepper = class {
    /**
     * The slideStepCounts parameter gives the number of build steps for each
     * slide.
     *
     * The initial slide and step (indices) set the initial slide/step to show.
     */
    constructor(slideStepCounts, initialSlide = 0, initialStep = 0) {
      if (slideStepCounts.length &lt; 1) {
        throw new Error("Slide show must have at least one slide.");
      }
      this.slideStepCounts = slideStepCounts;
      this.blanked = false;
      this.userUrlHash = null;
      this.onChangeCallbacks = [];
      this.curSlide = 0;
      this.curStep = 0;
      this.show(initialSlide, initialStep);
    }
    /**
     * The current state of the stepper.
     */
    get state() {
      return {
        slide: this.curSlide,
        step: this.curStep,
        blanked: this.blanked,
        userUrlHash: this.userUrlHash
      };
    }
    /**
     * Register a callback function to be called when the stepper's state
     * changes.
     */
    onChange(callback) {
      this.onChangeCallbacks.push(callback);
    }
    /**
     * Show a particular slide/step.
     *
     * If a userUrlHash is given, it will be included in any reported states. Its
     * validity is not verified and is not interpreted in any way.
     *
     * Returns true iff the slide was valid and we've advanced to that point,
     * false otherwise (we'll stay where we are).
     */
    show(slide, step = 0, userUrlHash = null) {
      const beforeState = this.state;
      if (slide &lt; 0 || slide &gt;= this.slideStepCounts.length || step &lt; 0 || step &gt;= this.slideStepCounts[slide]) {
        return false;
      }
      const slideChanged = this.curSlide !== slide;
      const stepChanged = this.curStep !== step;
      const blankedChanged = this.blanked !== false;
      this.curSlide = slide;
      this.curStep = step;
      this.blanked = false;
      let userUrlHashChanged = false;
      if (slideChanged || stepChanged || userUrlHash !== null) {
        userUrlHashChanged = this.userUrlHash !== userUrlHash;
        this.userUrlHash = userUrlHash;
      }
      if (slideChanged || stepChanged || blankedChanged || userUrlHashChanged) {
        for (const cb of this.onChangeCallbacks) {
          cb(this.state, beforeState);
        }
      }
      return true;
    }
    /**
     * Toggle blanking of the show. Returns true iff now blanked.
     *
     * NB: Blanking is automatically disabled when the slide/step is changed.
     */
    toggleBlank() {
      const beforeState = this.state;
      this.blanked = !this.blanked;
      const afterState = this.state;
      for (const cb of this.onChangeCallbacks) {
        cb(afterState, beforeState);
      }
      return this.blanked;
    }
    /** Advance to the next step (and then slide). Returns true iff one exists. */
    nextStep() {
      let slide = this.curSlide;
      let step = this.curStep;
      if (this.blanked) {
      } else if (step + 1 &lt; this.slideStepCounts[slide]) {
        step += 1;
      } else if (slide + 1 &lt; this.slideStepCounts.length) {
        step = 0;
        slide += 1;
      } else {
        return false;
      }
      return this.show(slide, step);
    }
    /**
     * Advance to the first step of the next slide (skipping any remaining build
     * steps on the current slide). Returns true iff one exists.
     */
    nextSlide() {
      let slide = this.curSlide;
      let step = this.curStep;
      if (this.blanked) {
      } else if (slide + 1 &lt; this.slideStepCounts.length) {
        step = 0;
        slide += 1;
      } else {
        return false;
      }
      return this.show(slide, step);
    }
    /** Return to the previous step (and then slide). Returns true iff one exists. */
    previousStep() {
      let slide = this.curSlide;
      let step = this.curStep;
      if (this.blanked) {
      } else if (step - 1 &gt;= 0) {
        step -= 1;
      } else if (slide - 1 &gt;= 0) {
        slide -= 1;
        step = this.slideStepCounts[slide] - 1;
      } else {
        return false;
      }
      return this.show(slide, step);
    }
    /**
     * Return to the first step of the current slide if not already on it.
     * Otherwise, returns to the first step of the previous slide (skipping any
     * interevening build steps on the current slide). Returns true iff one
     * exists.
     */
    previousSlide() {
      let slide = this.curSlide;
      let step = this.curStep;
      if (this.blanked) {
      } else if (step &gt; 0) {
        step = 0;
      } else if (slide - 1 &gt;= 0) {
        slide -= 1;
        step = 0;
      } else {
        return false;
      }
      return this.show(slide, step);
    }
    /**
     * Go to the first build step of the first slide.
     */
    start() {
      return this.show(0, 0);
    }
    /**
     * Go to the last build step of the last slide.
     */
    end() {
      const lastSlide = this.slideStepCounts.length - 1;
      const lastStep = this.slideStepCounts[lastSlide] - 1;
      return this.show(lastSlide, lastStep);
    }
  };

  // ts/thumbnails.ts
  function getThumbnails(svgRoot) {
    const out = [];
    for (const parentElem of svgRoot.getElementsByTagNameNS(
      ns("slidie"),
      "thumbnails"
    )) {
      for (const elem of parentElem.getElementsByTagNameNS(
        ns("slidie"),
        "thumbnail"
      )) {
        const stepNumber = JSON.parse(elem.getAttribute("step"));
        const type = elem.getAttribute("type");
        const encoding = elem.getAttribute("encoding");
        const codedData = elem.innerHTML;
        const dataUrl = `data:${type};${encoding},${codedData}`;
        out.push({ stepNumber, dataUrl });
      }
    }
    return out;
  }

  // ts/video.ts
  function setupMagicVideoPlayback(slide) {
    for (const video of slide.getElementsByTagNameNS(
      ns("xhtml"),
      "video"
    )) {
      if (video.hasAttributeNS(ns("slidie"), "magic")) {
        const start = parseFloat(
          video.getAttributeNS(ns("slidie"), "start") || "0"
        );
        const stepNumbers = JSON.parse(
          video.getAttributeNS(ns("slidie"), "steps") || "null"
        );
        video.currentTime = start;
        const onEnterOrChange = ({ stepNumber }) =&gt; {
          if (stepNumbers === null || stepNumbers.indexOf(stepNumber) &gt;= 0) {
            video.play();
          } else {
            video.pause();
            video.currentTime = start;
          }
        };
        slide.addEventListener("slideenter", onEnterOrChange);
        slide.addEventListener("stepchange", onEnterOrChange);
        slide.addEventListener("slideleave", () =&gt; {
          video.pause();
          video.currentTime = start;
        });
      }
    }
  }

  // ts/workarounds.ts
  function workaroundDeclarativeShadowDOMXHTMLBug(root = document) {
    for (const template of root.querySelectorAll(
      "template[shadowrootmode]"
    )) {
      if (template.namespaceURI === ns("xhtml")) {
        const parentNode = workaroundAttachShadowToNamespacedNodeBug(
          template.parentNode
        );
        const mode = template.getAttribute("shadowrootmode");
        const shadowRoot = parentNode.attachShadow({ mode });
        shadowRoot.appendChild(template.content);
        template.remove();
        workaroundVideoMovedFromTemplateBug(shadowRoot);
        workaroundDeclarativeShadowDOMXHTMLBug(shadowRoot);
      }
    }
  }
  function workaroundVideoMovedFromTemplateBug(root) {
    for (const videoElem of root.querySelectorAll("video")) {
      if (videoElem.namespaceURI === ns("xhtml")) {
        const innerHTML = videoElem.innerHTML;
        videoElem.innerHTML = "";
        videoElem.innerHTML = innerHTML;
      }
    }
  }
  function workaroundAttachShadowToNamespacedNodeBug(elem) {
    const replacement = elem.ownerDocument.createElementNS(
      elem.namespaceURI,
      elem.localName
    );
    elem.parentNode.insertBefore(replacement, elem);
    for (let i = 0; i &lt; elem.attributes.length; i++) {
      const { namespaceURI, localName } = elem.attributes.item(i);
      replacement.attributes.setNamedItemNS(
        elem.attributes.removeNamedItemNS(namespaceURI, localName)
      );
    }
    replacement.append(...elem.childNodes);
    elem.remove();
    return replacement;
  }
  function workaroundSVGLinkTargetBug(svg) {
    const iframes = /* @__PURE__ */ new Map();
    for (const iframe of svg.getElementsByTagNameNS(
      ns("xhtml"),
      "iframe"
    )) {
      const name = iframe.getAttribute("name");
      if (name) {
        iframes.set(name, iframe);
      }
    }
    for (const link2 of svg.getElementsByTagNameNS(ns("svg"), "a")) {
      link2.addEventListener("click", (evt) =&gt; {
        const href = link2.getAttributeNS(ns("xlink"), "href") || link2.getAttribute("href");
        const target = link2.getAttribute("target");
        if (href &amp;&amp; target) {
          const iframe = iframes.get(target);
          if (iframe) {
            iframe.contentWindow.location = href;
            evt.preventDefault();
          }
        }
      });
    }
  }

  // ts/app.ts
  function findSlides() {
    const containers = Array.from(
      document.querySelectorAll("#slides .slide-container")
    );
    const svgs = containers.map(
      (container) =&gt; container.shadowRoot.firstElementChild
    );
    return new SlideLookups(svgs, containers);
  }
  function connectStepperToSlideVisibility(stepper, slides) {
    function updateVisibility(state) {
      for (const [slide, container] of slides.containers.entries()) {
        container.style.visibility = state.blanked ? "hidden" : "visible";
        container.style.display = state.slide == slide ? "block" : "none";
      }
      for (const build of slides.buildSteps[state.slide]) {
        build.elem.style.display = build.steps.indexOf(state.step) &gt;= 0 ? "block" : "none";
      }
    }
    updateVisibility(stepper.state);
    stepper.onChange(updateVisibility);
  }
  function makeViewerPanesResizable() {
    resizeOnBorderDrag(document.getElementById("thumbnails"));
    resizeOnBorderDrag(document.getElementById("notes"));
  }
  function toggleDialog(dialog) {
    if (dialog.open) {
      dialog.close();
    } else {
      dialog.showModal();
      dialog.focus();
    }
  }
  function toggleHelp(document2 = window.document) {
    const dialog = document2.getElementById("help");
    toggleDialog(dialog);
  }
  function toggleFullScreen(stopwatch) {
    const slidePane = document.getElementById("slides");
    if (document.fullscreenElement === null) {
      slidePane.requestFullscreen();
      stopwatch.resume();
    } else {
      document.exitFullscreen();
    }
  }
  function setupToolbarButtons(stepper, slides, stopwatch) {
    const helpButton = document.getElementById("show-help");
    helpButton.addEventListener("click", () =&gt; toggleHelp());
    const presenterViewButton = document.getElementById("presenter-view");
    presenterViewButton.addEventListener(
      "click",
      () =&gt; showPresenterView(stepper, slides, stopwatch)
    );
    const fullScreenButton = document.getElementById("full-screen");
    fullScreenButton.addEventListener("click", () =&gt; toggleFullScreen(stopwatch));
  }
  function showTitle(slides) {
    if (slides.svgs[0].hasAttributeNS(ns("slidie"), "title")) {
      const title = slides.svgs[0].getAttributeNS(ns("slidie"), "title");
      document.title = `${title} - ${document.title}`;
      document.getElementById("title").innerText = title;
    }
  }
  function populateKeyboardHelp() {
    const container = document.getElementById("help-keyboard-shortcuts");
    for (const { keys, description } of KEYBOARD_SHORTCUTS) {
      const keysElem = document.createElementNS(ns("xhtml"), "dt");
      for (const [i, key] of keys.entries()) {
        if (i &gt; 0) {
          keysElem.append(" or ");
        }
        const kbd = document.createElementNS(ns("xhtml"), "kbd");
        if (KEYBOARD_KEYS_TO_SYMBOLS.has(key)) {
          kbd.innerText = KEYBOARD_KEYS_TO_SYMBOLS.get(key);
        } else {
          kbd.innerText = key;
        }
        keysElem.append(kbd);
      }
      const descriptionElem = document.createElementNS(
        ns("xhtml"),
        "dd"
      );
      descriptionElem.innerText = description;
      container.append(keysElem, descriptionElem);
    }
  }
  function makeStepThumbnail(image, link2, alt) {
    const fragment = document.getElementById("step-thumbnail").content.cloneNode(true);
    const a = fragment.querySelector("a");
    a.href = link2;
    const img = fragment.querySelector("img");
    img.src = image;
    img.alt = alt;
    return fragment;
  }
  function makeSlideThumbnails(slide, numberTooltip, steps) {
    const fragment = document.getElementById("slide-thumbnails").content.cloneNode(true);
    const number = fragment.querySelector(".slide-number");
    number.innerText = (slide + 1).toString();
    number.title = numberTooltip;
    const stepThumbnailContainer = fragment.querySelector(".step-thumbnails");
    for (const [step, { image, link: link2 }] of steps.entries()) {
      stepThumbnailContainer.append(
        makeStepThumbnail(
          image,
          link2,
          step == 0 ? `Slide {slide + 1}, step {step + 1}` : `Slide {slide + 1}`
        )
      );
    }
    return fragment;
  }
  function showThumbnails(slides) {
    const thumnailsContainer = document.getElementById("thumbnails");
    for (const [slide, svg] of slides.svgs.entries()) {
      const images = getThumbnails(svg);
      const sourceFilename = svg.getAttributeNS(ns("slidie"), "source");
      thumnailsContainer.append(
        makeSlideThumbnails(
          slide,
          sourceFilename,
          images.map(({ dataUrl }, step) =&gt; ({
            image: dataUrl,
            link: toUrlHash(slide, step)
          }))
        )
      );
    }
  }
  function connectStepperToThumbnailHighlight(stepper) {
    function updateHighlight(state) {
      for (const [slide, stepsContainer] of Array.from(
        document.querySelectorAll(".step-thumbnails")
      ).entries()) {
        for (const [step, stepContainer] of Array.from(
          stepsContainer.querySelectorAll(".thumbnail")
        ).entries()) {
          if (slide === state.slide &amp;&amp; step === state.step) {
            stepContainer.classList.add("selected");
            stepContainer.scrollIntoView({ block: "nearest", inline: "nearest" });
          } else {
            stepContainer.classList.remove("selected");
          }
        }
      }
    }
    updateHighlight(stepper.state);
    stepper.onChange(updateHighlight);
  }
  function markdownToElements(source) {
    const html2 = marked.parse(source);
    const mdDocument = new DOMParser().parseFromString(html2, "text/html");
    return mdDocument.body.childNodes;
  }
  function connectStepperToSpeakerNotes(stepper, slides, notesContainer) {
    function showSpeakerNotes(state, lastState) {
      const noteTemplate = document.getElementById(
        "note"
      );
      const speakerNotes = getSpeakerNotes(slides.svgs[state.slide]);
      const stepNumber = slides.buildStepNumbers[state.slide][state.step];
      if (lastState === null || state.slide !== lastState.slide) {
        while (notesContainer.lastChild) {
          notesContainer.removeChild(notesContainer.lastChild);
        }
        for (const { text } of speakerNotes) {
          const noteElem = noteTemplate.content.firstElementChild.cloneNode(
            true
          );
          markdownToElements(text).forEach((n) =&gt; noteElem.appendChild(n));
          notesContainer.append(noteElem);
        }
      }
      for (const [i, { stepNumbers }] of speakerNotes.entries()) {
        const noteElem = notesContainer.childNodes[i];
        if (stepNumbers === null || stepNumbers.indexOf(stepNumber) &gt;= 0) {
          noteElem.classList.add("current");
        } else {
          noteElem.classList.remove("current");
        }
      }
    }
    showSpeakerNotes(stepper.state, null);
    stepper.onChange(showSpeakerNotes);
  }
  function connectStepperToHash(stepper, slides) {
    function fromHash(state = null) {
      const hash = decodeURI(window.location.hash);
      const slideStep = parseUrlHash(
        hash,
        state !== null ? state.slide : -1,
        slides.ids,
        slides.buildStepNumbers,
        slides.buildStepTags
      );
      const valid = slideStep !== null &amp;&amp; stepper.show(slideStep[0], slideStep[1], hash);
      if (state !== null &amp;&amp; !valid) {
        console.log(state.userUrlHash);
        window.location.hash = state.userUrlHash || toUrlHash(state.slide, state.step);
      }
    }
    function toHash(state) {
      window.location.hash = state.userUrlHash || toUrlHash(state.slide, state.step);
    }
    fromHash();
    toHash(stepper.state);
    stepper.onChange(toHash);
    window.addEventListener("hashchange", () =&gt; fromHash(stepper.state));
  }
  function connectStepperToSlideSelector(stepper, slides) {
    const slideCount = document.querySelector(
      "#slide-selector .slide-count"
    );
    slideCount.innerText = slides.svgs.length.toString();
    const slideList = document.getElementById(
      "slide-list"
    );
    for (const value of enumerateAbsoluteHashes(slides.svgs)) {
      const option = document.createElementNS(
        ns("xhtml"),
        "option"
      );
      option.value = value.slice(1);
      slideList.appendChild(option);
    }
    const input = document.querySelector(
      "#slide-selector input.slide-number"
    );
    function fromInput(evt, state) {
      const hash = `#${input.value}`;
      const slideStep = parseUrlHash(
        hash,
        state.slide,
        slides.ids,
        slides.buildStepNumbers,
        slides.buildStepTags
      );
      const valid = slideStep !== null &amp;&amp; stepper.show(slideStep[0], slideStep[1], hash);
      if (valid) {
        input.blur();
        input.classList.remove("invalid");
      } else {
        input.classList.add("invalid");
      }
    }
    function toInput(state) {
      const hash = state.userUrlHash || toUrlHash(state.slide, state.step);
      input.value = hash.slice(1);
      input.classList.remove("invalid");
      input.style.width = `${Math.max(3, input.value.length)}em`;
    }
    stepper.onChange(toInput);
    toInput(stepper.state);
    input.addEventListener("change", (evt) =&gt; fromInput(evt, stepper.state));
    input.addEventListener("focus", () =&gt; {
      input.select();
    });
    input.addEventListener("keydown", (evt) =&gt; {
      if (evt.key == "Escape") {
        toInput(stepper.state);
        input.blur();
      }
    });
  }
  var KEYBOARD_SHORTCUTS = [
    {
      description: "Next step/slide",
      keys: ["Backspace", "ArrowUp", "ArrowLeft", "K"],
      action: (stepper) =&gt; stepper.previousStep()
    },
    {
      description: "Previous step/slide",
      keys: ["Enter", "ArrowDown", "ArrowRight", "J"],
      action: (stepper) =&gt; stepper.nextStep()
    },
    {
      description: "Jump to previous slide (skip build steps)",
      keys: ["PageUp"],
      action: (stepper) =&gt; stepper.previousSlide()
    },
    {
      description: "Jump to next slide (skip build steps)",
      keys: ["PageDown"],
      action: (stepper) =&gt; stepper.nextSlide()
    },
    {
      description: "Jump to start",
      keys: ["Home"],
      action: (stepper) =&gt; stepper.start()
    },
    {
      description: "Jump to end",
      keys: ["End"],
      action: (stepper) =&gt; stepper.end()
    },
    {
      description: "Black screen",
      keys: ["Z", "B", "."],
      action: (stepper) =&gt; stepper.toggleBlank()
    },
    {
      description: "Toggle full screen",
      keys: ["F"],
      action: (_stepper, _slides, stopwatch) =&gt; toggleFullScreen(stopwatch)
    },
    {
      description: "Open presenter view",
      keys: ["P"],
      action: (stepper, slides, stopwatch) =&gt; showPresenterView(stepper, slides, stopwatch)
    },
    {
      description: "Show help",
      keys: ["F1", "?"],
      action: () =&gt; toggleHelp()
    }
  ];
  function setupKeyboardShortcuts(stepper, slides, stopwatch) {
    window.addEventListener("keydown", (evt) =&gt; {
      if (keyboardEventInterferesWithElement(evt)) {
        return;
      }
      const match = matchKeypress(evt, KEYBOARD_SHORTCUTS);
      if (match !== null) {
        match.action(stepper, slides, stopwatch);
        evt.preventDefault();
        evt.stopPropagation();
      }
    });
  }
  function setupMouseClicks(stepper, element) {
    element.addEventListener("click", (evt) =&gt; {
      if (!eventInvolvesHyperlinkOrButton(evt)) {
        stepper.nextStep();
        evt.preventDefault();
        evt.stopPropagation();
        return false;
      }
    });
  }
  var KEYBOARD_KEYS_TO_SYMBOLS = /* @__PURE__ */ new Map([
    ["ArrowLeft", "\u2190"],
    ["ArrowUp", "\u2191"],
    ["ArrowRight", "\u2192"],
    ["ArrowDown", "\u2193"],
    ["Backspace", "\u232B"],
    ["Enter", "\u23CE"]
  ]);
  function app() {
    workaroundDeclarativeShadowDOMXHTMLBug();
    const slides = findSlides();
    slides.svgs.map(workaroundSVGLinkTargetBug);
    slides.svgs.map(setupForeignObjectScaling);
    slides.svgs.map(setupMagicVideoPlayback);
    const stepper = new Stepper(slides.buildStepCounts);
    const stopwatch = new Stopwatch();
    connectStepperToSlideVisibility(stepper, slides);
    connectStepperToSlideEvents(stepper, slides);
    makeViewerPanesResizable();
    setupToolbarButtons(stepper, slides, stopwatch);
    showTitle(slides);
    populateKeyboardHelp();
    showThumbnails(slides);
    connectStepperToThumbnailHighlight(stepper);
    connectStepperToSpeakerNotes(
      stepper,
      slides,
      document.getElementById("notes")
    );
    connectStepperToHash(stepper, slides);
    connectStepperToSlideSelector(stepper, slides);
    const slidePane = document.getElementById("slides");
    setClassWhileMouseIdle(slidePane);
    setupKeyboardShortcuts(stepper, slides, stopwatch);
    setupMouseClicks(stepper, slidePane);
  }

  // ts/index.ts
  app();
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=index.js
</xhtml:script>
  </xhtml:body>
</xhtml:html>